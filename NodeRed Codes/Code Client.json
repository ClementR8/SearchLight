[
    {
        "id": "34b9d5d8c870350c",
        "type": "tab",
        "label": "Client1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1e21066d4380d8a8",
        "type": "group",
        "z": "34b9d5d8c870350c",
        "name": "Dashboard",
        "style": {
            "label": true
        },
        "nodes": [
            "9882f8881258abcd",
            "6e188423aa48f4f7",
            "7ef8e6befb66d169",
            "bf7ce7b601cd2fe5"
        ],
        "x": 148,
        "y": 2633,
        "w": 5590,
        "h": 2026
    },
    {
        "id": "16d5787ce3c49dd5",
        "type": "group",
        "z": "34b9d5d8c870350c",
        "name": "Search for device",
        "style": {
            "label": true
        },
        "nodes": [
            "5751e7ae949fc2c0",
            "b2914cad12f12188",
            "9924e091cb0b7f26",
            "d218d79c9abdd740",
            "a67b264ee32bf7c9",
            "995fa744c4f5db51",
            "7f8d60b541220f2a",
            "5d8e1008ea04af02",
            "d2611546c11ee271",
            "0963749f50b7024f",
            "c8fb08cb2d5587d8",
            "84a25a1825310cdc",
            "6d5c917c6ca6f011",
            "46645dbcc6f996ca",
            "c1a3c44afc3aa0a8",
            "80a73ffb26033b8b",
            "3735f1987bea386c",
            "b3e72ab653a621e7",
            "db5c54afd7586fd4",
            "e3dc197785c2d519",
            "773696d6ed02775d",
            "afc638a05dd1c23a",
            "a2bdcba7ad5e21e5",
            "aad821d5b5b49089",
            "82b975a668aa6c0a",
            "83f295d2bcb8baf5",
            "cb3c68a942f8ea7a",
            "00c2ad103e9a52cd",
            "313adc9847167be7",
            "eabbc15c9e30554f",
            "2d82eb77145036ce",
            "d190d6e043664925",
            "d50bdc6693603a26",
            "f61ca98b87c03fb9",
            "68a27b7ff0112041",
            "a51f83288c379d44",
            "ecac976082bdc147"
        ],
        "x": 164.66668701171875,
        "y": 971.6666259765625,
        "w": 4421.333312988281,
        "h": 1314
    },
    {
        "id": "2c9021644b66ef7d",
        "type": "group",
        "z": "34b9d5d8c870350c",
        "name": "User Identification/Registration",
        "style": {
            "label": true,
            "stroke": "#92d04f",
            "color": "#000000"
        },
        "nodes": [
            "4bb51ed6a6202af4",
            "78413c3860d31e49",
            "6413950a8bc9db25",
            "218897142cd0994a",
            "ac05c101776077ec",
            "beded6a7f6076acc",
            "e9607cfdd2aaf9c3",
            "908af373545f66bc",
            "98e65a7b726a4205",
            "4bf652ddaa48c373",
            "64b5b9f1bf771007",
            "e725884c5886e182",
            "15ebf48c1780b916",
            "21a050ded1e1db1c",
            "d235a7857b0e32aa",
            "2cf0eee11313012f",
            "f531ca6f46d9edd0",
            "feea32dd9ca80747",
            "a5cdd78e05aace41",
            "84728b8add0a9f02",
            "062d63e9bc9d9b40",
            "69d05671296599c6",
            "b0627760db48bd2f",
            "04c0821af2c3b594",
            "95d3620cee5d5917",
            "38e673170a81baab",
            "c6421c99cdc4c2fc",
            "2960cd0ea46425fb",
            "9a058db7c58870f4",
            "81c5efa4cee25996",
            "81ac3116672e320b",
            "b81e680e0fdce029",
            "09a7bc7942ba6b09",
            "bdccf410ad319795",
            "53821a38e936e051",
            "a7b4e34b8f68cebf",
            "9633a34e78ff5646",
            "902e65aea0fe5d7f",
            "fcbde42a3cc304f5",
            "9e57d9205c7b2d83",
            "5c6dda9ebf85960c"
        ],
        "x": 154,
        "y": 4859,
        "w": 2592,
        "h": 422
    },
    {
        "id": "64fdefb75f957abe",
        "type": "group",
        "z": "34b9d5d8c870350c",
        "name": "MAIN CODE",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "7d10627380a7bfbe",
            "7342e402e872298a",
            "89346e6aff0cfa74",
            "264d8e6587330dd6",
            "66ba91e1d82f9664",
            "283bcbca1d26617e",
            "a563133ccbf2d8b4",
            "73e3f8beed25e94e",
            "8a9f2aa60bb64229"
        ],
        "x": 88,
        "y": 5853,
        "w": 2718,
        "h": 474
    },
    {
        "id": "5f7df470f08b4e07",
        "type": "group",
        "z": "34b9d5d8c870350c",
        "name": "Project : Searchlight",
        "style": {
            "label": true,
            "color": "#ff0000"
        },
        "nodes": [
            "c73a4cd414c20993",
            "0cfa3208ebf2c27a",
            "2a584053457b55a7",
            "b9f8919490b4e0f8"
        ],
        "x": 3568,
        "y": 5573,
        "w": 3524,
        "h": 1214
    },
    {
        "id": "9882f8881258abcd",
        "type": "group",
        "z": "34b9d5d8c870350c",
        "g": "1e21066d4380d8a8",
        "name": "Dashboard - Home",
        "style": {
            "label": true,
            "color": "#777777",
            "stroke": "#0070c0"
        },
        "nodes": [
            "c81138490f611e60",
            "b76bd6ce96afc622",
            "9dca964bc9c61e2c",
            "499b0852ecf4c9e3",
            "e1ca5b4722dc3d8a",
            "d8d3fced1348bb0c",
            "02dc441daaf6d2d9",
            "f4d95081c3b4d67e",
            "8839912a3c6141cf",
            "75eeee7cfbadaf2c"
        ],
        "x": 174,
        "y": 2659,
        "w": 1172,
        "h": 342
    },
    {
        "id": "6e188423aa48f4f7",
        "type": "group",
        "z": "34b9d5d8c870350c",
        "g": "1e21066d4380d8a8",
        "name": "Dashboard - Events",
        "style": {
            "stroke": "#0070c0",
            "label": true
        },
        "nodes": [
            "7fc890cfee7bbd25",
            "a693b98e58a57d20",
            "16661bf467c5cd6f",
            "06f2a57eb41ccf16",
            "361cc174d51639f0",
            "0db351623e9b08c6",
            "3baeed0652dc00e9",
            "bfda0695d496c0fa",
            "a2b75f12130ec16a",
            "f845f07aab23c07d"
        ],
        "x": 234,
        "y": 3033,
        "w": 1492,
        "h": 308
    },
    {
        "id": "7ef8e6befb66d169",
        "type": "group",
        "z": "34b9d5d8c870350c",
        "g": "1e21066d4380d8a8",
        "name": "Settings Page",
        "style": {
            "label": true
        },
        "nodes": [
            "0a9cf1440f06c91c",
            "e3e686507ad59eda",
            "4e40b973b3e252d0",
            "7243f2ace301fdbf",
            "5a3917253c3fd05c",
            "bb92db5410d82dab"
        ],
        "x": 248,
        "y": 3539,
        "w": 5464,
        "h": 1094
    },
    {
        "id": "b2914cad12f12188",
        "type": "group",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "Wifi scan and connection",
        "style": {
            "label": true
        },
        "nodes": [
            "863d0aad6f30e757",
            "958518cefb3fadcf",
            "3e8d7f5f98218497",
            "8af83b8ff402cd65",
            "8c9732af324e5622",
            "601f371c7f43f424",
            "08f5077c188b0f86",
            "fdd886c87a6b6ae4",
            "9d5047feffd5899d",
            "6fe686c8f73ff52d",
            "b718ba73e32b6b9b",
            "c642f469e6582fa1"
        ],
        "x": 190.66668701171875,
        "y": 1071.6666259765625,
        "w": 1212,
        "h": 309.5
    },
    {
        "id": "9924e091cb0b7f26",
        "type": "group",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "Automatic System Configuration",
        "style": {
            "label": true
        },
        "nodes": [
            "24c1307400c59c34",
            "22ee290bd84b9d77",
            "d0473fe29f9f4b10",
            "e7ba9ec418683450",
            "b4208de64e8cdf56",
            "2e91f6b329dfed2c",
            "12d1e5ef804518ce",
            "74a2d3536f247f90",
            "fe51b824103cfb59",
            "df3f37f462e2c43e",
            "599626f17e96064d",
            "5ca5d5cbedd76c42",
            "8ff4c89e81292998",
            "77d3ed8ff86c768a",
            "320633a82b9b5482",
            "91f1c5d7a0351569",
            "ad32fa0385c4f213",
            "03410f666a0f30c9",
            "aa85e9a4bef663d1"
        ],
        "x": 190.66668701171875,
        "y": 1451.6666259765625,
        "w": 1792,
        "h": 302
    },
    {
        "id": "84a25a1825310cdc",
        "type": "group",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "Reconnect to Wifi Network",
        "style": {
            "label": true
        },
        "nodes": [
            "3e0186213663d669",
            "29f09ac9fa9eef4c"
        ],
        "x": 1430.6666870117188,
        "y": 1344.1666259765625,
        "w": 592,
        "h": 97
    },
    {
        "id": "80a73ffb26033b8b",
        "type": "group",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "Dashboard-DB linking",
        "style": {
            "label": true
        },
        "nodes": [
            "d439943da55b43cf",
            "242e9e40b42a944e",
            "a2adc02e8ab8b576",
            "13f7c8d52741541a",
            "0119ad0b5c119228",
            "67f72ab87c077470",
            "3730f1a9a47601e9",
            "1bd26aea54c25a1d",
            "9bff665941532f61",
            "3f0e420ba6fb02af",
            "51c9f4584955f960",
            "0b53c379f1720525",
            "7a67d3528e55f960",
            "2e36a5554d6457c2",
            "cab3b61bfe625e8f",
            "e5e10a03c765f635"
        ],
        "x": 3084.6666870117188,
        "y": 1291.6666259765625,
        "w": 1104,
        "h": 648
    },
    {
        "id": "bf7ce7b601cd2fe5",
        "type": "group",
        "z": "34b9d5d8c870350c",
        "g": "1e21066d4380d8a8",
        "name": "Home - Map",
        "style": {
            "label": true
        },
        "nodes": [
            "396fcda5818b82b2",
            "9feba09748830ee1",
            "ef5bb0b527341322",
            "b118cf9b41fcf4b0",
            "e356758130d6efd0",
            "5babb0aadbeb9802",
            "c62f2d5b4fea6c08",
            "8bd5ee005aeecbed",
            "5eb0bb68e968e64a",
            "6b93a08383379b4c",
            "41a04c90987ac304",
            "95a81b4293434fdd",
            "78d85a87593e159e",
            "114b81a9cf47b271",
            "469d4ce6a3474906",
            "9026fecd993243e9",
            "c43d32e0ad1daa80",
            "d90f7f67ae03f60a",
            "process_coordinates",
            "worldmap_out",
            "ccf932ef802ba1c2",
            "060cec4e518c97fa",
            "51205da211542063",
            "b3f9b22aae8085f4",
            "cae64644983b819f",
            "292596d65b0e1a93",
            "7e326515acc6175a",
            "7ce08ce419fb4342",
            "465637e1a2125480",
            "918a68f3177ada27"
        ],
        "x": 2074,
        "y": 2739,
        "w": 1572,
        "h": 582
    },
    {
        "id": "a51f83288c379d44",
        "type": "group",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "Ip Finder",
        "style": {
            "label": true
        },
        "nodes": [
            "a2821ce2027afb82",
            "0af1cda109d80e46",
            "4e8ee0d497a57534",
            "2184ecd8e1eae065",
            "bfb7858c2e09d405",
            "0879243caed209bb",
            "962d97808e590fac",
            "18d6bb10bb2e3df8",
            "eb80392738ab3f9d",
            "a75e145b51c53c13"
        ],
        "x": 2604.6666870117188,
        "y": 1985.6666259765625,
        "w": 1938,
        "h": 274
    },
    {
        "id": "7342e402e872298a",
        "type": "group",
        "z": "34b9d5d8c870350c",
        "g": "64fdefb75f957abe",
        "name": "Sensor Filtering",
        "style": {
            "label": true,
            "stroke": "#92d04f"
        },
        "nodes": [
            "a0601eb97536fd55",
            "a88acb4b8c400619"
        ],
        "x": 114,
        "y": 6139,
        "w": 592,
        "h": 82
    },
    {
        "id": "264d8e6587330dd6",
        "type": "group",
        "z": "34b9d5d8c870350c",
        "g": "64fdefb75f957abe",
        "name": "Projects using this sensor",
        "style": {
            "label": true
        },
        "nodes": [
            "0bc107d3267fbcb6",
            "680d1b3595b12353",
            "f3b3ae1963c885d0",
            "6970ff51a305b3ae",
            "e11f86c1200069ef",
            "1c9b889f24de9412",
            "eef50ee37a035b3b",
            "9d689208007af48e"
        ],
        "x": 1054,
        "y": 5879,
        "w": 1372,
        "h": 122
    },
    {
        "id": "c73a4cd414c20993",
        "type": "group",
        "z": "34b9d5d8c870350c",
        "g": "5f7df470f08b4e07",
        "name": "Detection Algorithm",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "e3d3bc989375e8ba",
            "a393ac94d16fb36a",
            "a324165355d08e0e",
            "76394ea8d41d81be",
            "a7519cdb2d8051cc",
            "eb5bd88b4b0660bb",
            "f3f70e91cfd2bbd8",
            "3e36a891ccd82b41",
            "5b2198babd6dcef8",
            "d9b5052f8c309e02",
            "1cc4e10f4dbd531b",
            "6dac2d7904e7e7f8",
            "d18fbd915d34a9ef",
            "b96b56e07e6095d7",
            "5b2b64a62721f061",
            "bb614dfeb2f1d0d9",
            "84ad1d57c225b792",
            "8bdf8866ff84c8cd",
            "c88da378a3165dcd",
            "b83eb5d4c425e6bd",
            "2f7ce649354c48ad",
            "e7fc0391af3940fc"
        ],
        "x": 5534,
        "y": 6099,
        "w": 1532,
        "h": 662
    },
    {
        "id": "0cfa3208ebf2c27a",
        "type": "group",
        "z": "34b9d5d8c870350c",
        "g": "5f7df470f08b4e07",
        "name": "MaxDistance Algorithm",
        "style": {
            "label": true
        },
        "nodes": [
            "132be72fd9d74bdb",
            "0ea817dbaae0a47d",
            "02989a56ff064cc7",
            "de91bd9e201564a9",
            "bcb28c02c8b90649",
            "059256d4ec5ebcfc",
            "aff7db0bc02d6368",
            "a1fabecf82faf188",
            "dc4901454ef9dc5c",
            "aba71187493b930d",
            "500a51a8d827cf08",
            "293b2bb02be56b69"
        ],
        "x": 5114,
        "y": 5759,
        "w": 1812,
        "h": 222
    },
    {
        "id": "2a584053457b55a7",
        "type": "group",
        "z": "34b9d5d8c870350c",
        "g": "5f7df470f08b4e07",
        "name": "Motion detection",
        "style": {
            "label": true
        },
        "nodes": [
            "e6d3d4cf49eeb558"
        ],
        "x": 6074,
        "y": 5599,
        "w": 312,
        "h": 82
    },
    {
        "id": "b9f8919490b4e0f8",
        "type": "group",
        "z": "34b9d5d8c870350c",
        "g": "5f7df470f08b4e07",
        "name": "Topic Verification To Launch Project Code",
        "style": {
            "label": true
        },
        "nodes": [
            "f961771c76b22c65",
            "ade3228573ea0e23",
            "146a95e7438c2841",
            "f305eefd989da483",
            "4487be170e6c4e02",
            "51e35df104252090",
            "5af18001646345c3",
            "910821b78d260483",
            "e649fc743bf4e29e",
            "34571baa23fe35b5",
            "a61e4603b29a8b29",
            "1fd92c519d056642",
            "e3873320302c5ac6",
            "578db0e9a9b0c810"
        ],
        "x": 3594,
        "y": 5819,
        "w": 1412,
        "h": 502
    },
    {
        "id": "bb92db5410d82dab",
        "type": "group",
        "z": "34b9d5d8c870350c",
        "g": "7ef8e6befb66d169",
        "name": "Projects Management",
        "style": {
            "label": true
        },
        "nodes": [
            "babaaafdcf532812",
            "92670ff45410784c",
            "6ef76832d4b67ffc",
            "8360d3de2f7ee442",
            "0c3e0cb106b24b0b",
            "69db89a492958687",
            "3f4a80a79807962e",
            "5876df96110f2210",
            "650737f1cccedbcf",
            "06c554a73b5c09eb",
            "811226cf72cf022b",
            "0de3c69dfd39a227",
            "e9933bb171fa4089",
            "be3e2bfed815718d",
            "1fdcd1deddb1ed3a",
            "7354b079c4e10196",
            "d462388fbdee543e",
            "6efde7f27af0b8a7",
            "2ce71170cf68ade5",
            "d4dd3c1dc652e1c7",
            "6d63a5e442b1ccfb",
            "1691fd1c88e91e78",
            "302c9afc3a9615c0",
            "5192fca4dfcd4603",
            "ed518214a6647435",
            "cb7fbbff04b5b197",
            "fc9e72304032d7f2",
            "425b2e202f4be8ff",
            "8223faea8e253916",
            "2e3f2a47ead1cbb3",
            "53b8013206b619ec",
            "f164b3de75c79baa",
            "f08bc6bca3db6984",
            "ad14678634bcb461",
            "c560f2386300ae5a",
            "f0474a29fdd7dba7",
            "f15f5b5423da8093",
            "1e69d04fb98d7795",
            "3f49338bdddaee7b",
            "bca9bada2019de1c",
            "209d9691db58dc89",
            "e3606ae3381f4824",
            "ce9975e3ffb6d611",
            "de5de707d385c955",
            "e17c887d56f052c9",
            "38c6569860eaa961",
            "86fc3c74ba96da1c",
            "dbeff8606ef5e5da",
            "70b92a87458db9a7",
            "c19c58d27c3c89af",
            "bf4058d63691c556",
            "dcad91a396725b5b",
            "75b59b4518215040",
            "b6cd61db71ce2e49",
            "50bc110297dc8f34",
            "78f33ef16c0e0553",
            "c5686c0ef0124eef",
            "4ff6a28e1a8949fb",
            "877036d0e4f83e0d",
            "ffe43744f2319de3",
            "5e0142638e12be4a",
            "bb9b8a13ef55a079",
            "e512873b732f38ee",
            "fbbbde6056f8527d"
        ],
        "x": 274,
        "y": 3759,
        "w": 5412,
        "h": 848
    },
    {
        "id": "f845f07aab23c07d",
        "type": "group",
        "z": "34b9d5d8c870350c",
        "g": "6e188423aa48f4f7",
        "name": "Dashboard - Events",
        "style": {
            "stroke": "#0070c0",
            "label": true
        },
        "nodes": [
            "eb8f9b7fc62740f3",
            "29a96aee1ee4b36b",
            "f8266762ca93caac",
            "a82dc46322bd6696",
            "e7485ebe65cac3f3"
        ],
        "x": 674,
        "y": 3059,
        "w": 462,
        "h": 242
    },
    {
        "id": "e5e10a03c765f635",
        "type": "group",
        "z": "34b9d5d8c870350c",
        "g": "80a73ffb26033b8b",
        "name": "Delete Sensor",
        "style": {
            "label": true
        },
        "nodes": [
            "c529467fd81c23a6",
            "76bec8ce0440d5f5",
            "18ce4bb31616f5bf",
            "d0aa3cb322182cfb",
            "36f3aaac45cb4a75",
            "14fd992d22a929cd"
        ],
        "x": 3110.6666870117188,
        "y": 1791.6666259765625,
        "w": 1052,
        "h": 122
    },
    {
        "id": "a75e145b51c53c13",
        "type": "group",
        "z": "34b9d5d8c870350c",
        "g": "a51f83288c379d44",
        "name": "ipscan",
        "style": {
            "label": true
        },
        "nodes": [
            "1add0367c933ba5d",
            "6efc0a27e4f975fb",
            "118d416ad1c23644",
            "6d881d1c484ece7d",
            "0ed1514019640b1b",
            "37c78c699a45c373"
        ],
        "x": 2630.6666870117188,
        "y": 2011.6666259765625,
        "w": 912,
        "h": 222
    },
    {
        "id": "5876df96110f2210",
        "type": "group",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "Create New Project",
        "style": {
            "label": true
        },
        "nodes": [
            "21f48da105e5a879",
            "061ee6ca3e944c7f",
            "eb1010887f30463d",
            "86b5da5b673a5f28",
            "6e79112d2b8fdba9",
            "13327eac639feaa6",
            "51222d5502910ed2",
            "cec43d24d6d528e6",
            "c6012ac18984803f",
            "1652bdb9fcb93e53"
        ],
        "x": 2594,
        "y": 4359,
        "w": 1392,
        "h": 222
    },
    {
        "id": "811226cf72cf022b",
        "type": "group",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "Delete Project in Tables PROJECTS, PROJECTSENSORS and EVENTS",
        "style": {
            "label": true
        },
        "nodes": [
            "222771103d2e42b6",
            "a4f7bc1de3a207ec",
            "599c1e8f2e43f55a",
            "2fedacabf9ffb6bd",
            "43d4e23437b6e3f6",
            "43eda9ab6c897f5d",
            "915c16c34c2301dd"
        ],
        "x": 1494,
        "y": 4439,
        "w": 932,
        "h": 142
    },
    {
        "id": "d0af9de15541f891",
        "type": "group",
        "z": "34b9d5d8c870350c",
        "name": "Creation of a sensor list variable",
        "style": {
            "label": true
        },
        "nodes": [
            "2be112a7d9138740",
            "c17b6dad1450065b",
            "78e9e0ad998deca6",
            "c4e9a8f6f4d74e48",
            "aceafb8778f012ca",
            "325433da380be64f",
            "87849ad4f971051e"
        ],
        "x": 1594,
        "y": 5339,
        "w": 1112,
        "h": 142
    },
    {
        "id": "73e3f8beed25e94e",
        "type": "group",
        "z": "34b9d5d8c870350c",
        "g": "64fdefb75f957abe",
        "name": "Get Sensors Details",
        "style": {
            "label": true
        },
        "nodes": [
            "d616d07adc54c790",
            "eeb8a2b186871d5d",
            "222e8fecd5c94159",
            "868ebfc6130e0737",
            "fd562dacaff9c4f9",
            "5bb7a1233a28320b",
            "4b0c42c3dbd90084",
            "37eec3b8705e438a",
            "310d312159dca52c",
            "569979f14d75dbcb",
            "5d25c9d08728df4b",
            "838d3310b3a72fd1",
            "41a0971a56e54bf5",
            "0b84e7a1a17b171c"
        ],
        "x": 874,
        "y": 6079,
        "w": 1112,
        "h": 222
    },
    {
        "id": "babaaafdcf532812",
        "type": "ui_template",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "group": "189b07066857a9dc",
        "name": "Display the projects in dashboard",
        "order": 2,
        "width": "5",
        "height": "7",
        "format": "<div>\n    <style>\n        .project-button {\n            margin-right: 10px;\n            padding: 5px 10px;\n            font-size: 14px;\n            background-color: #007bff;\n            color: white;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n        }\n\n        .project-button:hover {\n            background-color: #0056b3;\n        }\n\n        .delete-project-button {\n            padding: 5px 10px;\n            font-size: 14px;\n            background-color: #dc3545;\n            color: white;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n            margin-left: auto;\n        }\n\n        .delete-project-button:hover {\n            background-color: #c82333;\n        }\n\n        .project-item {\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            margin-bottom: 10px;\n        }\n    </style>\n\n    <h3>Project List</h3>\n    <ul style=\"list-style-type: none; padding: 0;\">\n        <!-- Iterate over the payload to create a list item for each project -->\n        <li ng-repeat=\"project in msg.payload.result\" class=\"project-item\">\n            <button class=\"project-button\" ng-click=\"send({payload: {project: project.projectname}})\">\n                {{project.projectname}}\n            </button>\n            <button class=\"delete-project-button\" ng-click=\"send({payload: {message: 'delete_project', projectid: project.projectid}})\">\n                Delete\n            </button>\n        </li>\n    </ul>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1620,
        "y": 3900,
        "wires": [
            [
                "06c554a73b5c09eb"
            ]
        ]
    },
    {
        "id": "92670ff45410784c",
        "type": "ui_ui_control",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "",
        "events": "all",
        "x": 3460,
        "y": 3880,
        "wires": [
            []
        ]
    },
    {
        "id": "6ef76832d4b67ffc",
        "type": "change",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "Display Project's Sensors",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"Main_Add_devices\",\"Main_DevicesConnected\",\"Main_Statistics\",\"Main_Logs\",\"Main_Map\",\"Main_Add_Project\",\"Main_Projects\",\"Main_ChooseMapPoint\",\"Main_LogInPage\",\"Main_RegisterPage\"],\"show\":[\"Main_System\",\"Main_Settings\",\"Main_Projects_Sensors\",\"Main_Buttons\",\"Main_ConnectionPage\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3230,
        "y": 3880,
        "wires": [
            [
                "92670ff45410784c"
            ]
        ]
    },
    {
        "id": "8360d3de2f7ee442",
        "type": "ui_template",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "group": "bb08f9111b2f85de",
        "name": "Display all the sensors of the user with toggle squares",
        "order": 0,
        "width": "5",
        "height": "7",
        "format": "<div>\n  <style>\n    .square-button {\n      width: 15px;\n      height: 15px;\n      border: 1px solid white;\n      cursor: pointer;\n      border-radius: 3px;\n    }\n\n    .square-button.on {\n      background-color: white;\n    }\n\n    .square-button.off {\n      background-color: black;\n    }\n\n    .no-sensors {\n      text-align: center;\n      font-size: 18px;\n      color: #999;\n      padding: 20px;\n    }\n\n    .submit-button {\n      margin-top: 20px;\n      padding: 10px 20px;\n      font-size: 16px;\n      background-color: #007bff;\n      color: white;\n      border: none;\n      border-radius: 5px;\n      cursor: pointer;\n    }\n\n    .submit-button:hover {\n      background-color: #0056b3;\n    }\n  </style>\n\n  <div style=\"display: flex; align-items: center; justify-content: space-between;\">\n    <h3 style=\"margin: 0;\">Sensors List</h3>\n    <span style=\"color: white;\">Add</span>\n  </div>\n\n  <ul style=\"list-style-type: none; padding: 0;\">\n    <li ng-repeat=\"sensor in sensors\" style=\"display: flex; align-items: center; margin-bottom: 10px;\">\n      <span style=\"flex: 1;\">{{sensor.sensorname}}</span>\n      <button ng-click=\"toggleSensor(sensor)\" class=\"square-button\" ng-class=\"{'on': sensor.isOn, 'off': !sensor.isOn}\"></button>\n    </li>\n  </ul>\n\n  <button class=\"submit-button\" ng-click=\"submitActivatedSensors()\">Submit</button>\n</div>\n\n<script>\n  (function(scope) {\n    // Initialize sensors array to store connected sensors\n    scope.sensors = [];\n\n    // Function to toggle sensor state\n    scope.toggleSensor = function(sensor) {\n      sensor.isOn = !sensor.isOn; // Toggle sensor state\n    };\n\n    // Function to submit activated sensors\n    scope.submitActivatedSensors = function() {\n      var activatedSensors = scope.sensors.filter(sensor => sensor.isOn).map(sensor => sensor.sensorname);\n      scope.send({ payload: activatedSensors }); // Send array of activated sensor names to Node-RED\n    };\n\n    // Watch for changes in the msg object (assuming it contains sensors array)\n    scope.$watch('msg', function(msg) {\n      if (msg.payload && Array.isArray(msg.payload)) {\n        // Initialize sensor states if not already done\n        msg.payload.forEach(sensor => {\n          if (sensor.isOn === undefined) {\n            sensor.isOn = false; // Default state is off\n          }\n        });\n        scope.sensors = msg.payload; // Update sensors array with new sensors\n      }\n    });\n  })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3660,
        "y": 4000,
        "wires": [
            [
                "650737f1cccedbcf",
                "e9933bb171fa4089",
                "86fc3c74ba96da1c"
            ]
        ]
    },
    {
        "id": "0c3e0cb106b24b0b",
        "type": "join",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 4550,
        "y": 4040,
        "wires": [
            [
                "69db89a492958687",
                "78f33ef16c0e0553"
            ]
        ]
    },
    {
        "id": "69db89a492958687",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "debug 402",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4790,
        "y": 3940,
        "wires": []
    },
    {
        "id": "3f4a80a79807962e",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "debug 403",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4890,
        "y": 4180,
        "wires": []
    },
    {
        "id": "21f48da105e5a879",
        "type": "ui_button",
        "z": "34b9d5d8c870350c",
        "g": "5876df96110f2210",
        "name": "",
        "group": "189b07066857a9dc",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Add project",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 2690,
        "y": 4460,
        "wires": [
            [
                "061ee6ca3e944c7f",
                "86b5da5b673a5f28",
                "1652bdb9fcb93e53"
            ]
        ]
    },
    {
        "id": "061ee6ca3e944c7f",
        "type": "ui_form",
        "z": "34b9d5d8c870350c",
        "g": "5876df96110f2210",
        "name": "",
        "label": "",
        "group": "255dc90b96cf3a52",
        "order": 0,
        "width": "5",
        "height": "7",
        "options": [
            {
                "label": "Project Name",
                "value": "projectName",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Alert",
                "value": "alert",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Alarm",
                "value": "alarm",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Alert Type",
                "value": "alertType",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "AlarmType",
                "value": "alarmType",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "projectName": "",
            "alert": "",
            "alarm": "",
            "alertType": "",
            "alarmType": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 2850,
        "y": 4460,
        "wires": [
            [
                "13327eac639feaa6"
            ]
        ]
    },
    {
        "id": "eb1010887f30463d",
        "type": "ui_ui_control",
        "z": "34b9d5d8c870350c",
        "g": "5876df96110f2210",
        "name": "",
        "events": "all",
        "x": 3040,
        "y": 4540,
        "wires": [
            []
        ]
    },
    {
        "id": "86b5da5b673a5f28",
        "type": "change",
        "z": "34b9d5d8c870350c",
        "g": "5876df96110f2210",
        "name": "Add new project page",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"Main_Add_devices\",\"Main_DevicesConnected\",\"Main_Statistics\",\"Main_Logs\",\"Main_Map\",\"Main_Projects\",\"Main_Projects_Sensors\",\"Main_ChooseMapPoint\",\"Main_LogInPage\",\"Main_RegisterPage\"],\"show\":[\"Main_System\",\"Main_Settings\",\"Main_Add_Project\",\"Main_Buttons\",\"Main_ConnectionPage\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2860,
        "y": 4540,
        "wires": [
            [
                "eb1010887f30463d"
            ]
        ]
    },
    {
        "id": "650737f1cccedbcf",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "debug 407",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3990,
        "y": 3920,
        "wires": []
    },
    {
        "id": "06c554a73b5c09eb",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "",
        "property": "payload.message",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "delete_project",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1890,
        "y": 3900,
        "wires": [
            [
                "2ce71170cf68ade5",
                "222771103d2e42b6"
            ],
            [
                "2ce71170cf68ade5",
                "2e3f2a47ead1cbb3"
            ]
        ]
    },
    {
        "id": "0de3c69dfd39a227",
        "type": "ui_button",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "",
        "group": "8f0a6d83b373cd31",
        "order": 10,
        "width": "5",
        "height": "1",
        "passthru": true,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "settings",
        "payload": "{\"group\":{\"hide\":[\"Main_Add_devices\",\"Main_DevicesConnected\",\"Main_Statistics\",\"Main_Logs\",\"Main_Map\",\"Main_Add_Project\",\"Main_Projects_Sensors\",\"Main_ChooseMapPoint\",\"Main_LogInPage\",\"Main_RegisterPage\",\"Main_LogInPage\",\"Main_RegisterPage\"],\"show\":[\"Main_System\",\"Main_Settings\",\"Main_Projects\",\"Main_Buttons\",\"Main_ConnectionPage\"]}}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 390,
        "y": 3900,
        "wires": [
            [
                "e9933bb171fa4089",
                "7354b079c4e10196",
                "d462388fbdee543e",
                "5192fca4dfcd4603",
                "425b2e202f4be8ff",
                "f0474a29fdd7dba7"
            ]
        ]
    },
    {
        "id": "e9933bb171fa4089",
        "type": "change",
        "z": "34b9d5d8c870350c",
        "d": true,
        "g": "bb92db5410d82dab",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "socketid",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 4120,
        "wires": [
            [
                "d4dd3c1dc652e1c7",
                "1691fd1c88e91e78"
            ]
        ]
    },
    {
        "id": "be3e2bfed815718d",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "debug 408",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 4200,
        "wires": []
    },
    {
        "id": "1fdcd1deddb1ed3a",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "debug 409",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 3980,
        "wires": []
    },
    {
        "id": "7354b079c4e10196",
        "type": "ui_ui_control",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "",
        "events": "change",
        "x": 1060,
        "y": 3900,
        "wires": [
            []
        ]
    },
    {
        "id": "d462388fbdee543e",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "d": true,
        "g": "bb92db5410d82dab",
        "name": "Select all the projects based on their socketid",
        "func": "var socketId = msg.socketid;\nvar sqlQuery = `SELECT * FROM PROJECTS WHERE SOCKETID = ${socketId};`;\n// Assign the query to msg.query for execution\nmsg.query = sqlQuery;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 3940,
        "wires": [
            []
        ]
    },
    {
        "id": "6efde7f27af0b8a7",
        "type": "ui_text",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "group": "97ca55bdc6353279",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "User",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 450,
        "y": 4380,
        "wires": []
    },
    {
        "id": "2ce71170cf68ade5",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "debug 410",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 3800,
        "wires": []
    },
    {
        "id": "2fedacabf9ffb6bd",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "811226cf72cf022b",
        "name": "debug 414",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2310,
        "y": 4540,
        "wires": []
    },
    {
        "id": "d4dd3c1dc652e1c7",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "debug 415",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 4160,
        "wires": []
    },
    {
        "id": "6d63a5e442b1ccfb",
        "type": "ui_ui_control",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "",
        "events": "change",
        "x": 1140,
        "y": 4020,
        "wires": [
            []
        ]
    },
    {
        "id": "1691fd1c88e91e78",
        "type": "change",
        "z": "34b9d5d8c870350c",
        "d": true,
        "g": "bb92db5410d82dab",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"Main_Add_devices\",\"Main_DevicesConnected\",\"Main_Statistics\",\"Main_Logs\",\"Main_Map\",\"Main_Add_Project\",\"Main_Projects_Sensors\"],\"show\":[\"Main_System\",\"Main_Settings\",\"Main_Projects\",\"Main_HomeButton\",\"Main_DevicesButton\",\"Main_EventsButton\",\"Main_SettingsButton\",\"Main_ConnectionPage\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 4020,
        "wires": [
            [
                "6d63a5e442b1ccfb",
                "302c9afc3a9615c0"
            ]
        ]
    },
    {
        "id": "302c9afc3a9615c0",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "debug 416",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 3980,
        "wires": []
    },
    {
        "id": "5192fca4dfcd4603",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "Send request Projects of User",
        "func": "var userId = flow.get('user_id'); // Get the flow variable 'user_id'\nvar sqlQuery = `SELECT * FROM PROJECTS WHERE USERID = ${userId};`; // Construct the SQL query\n\n\nmsg.payload = {\n    userid: userId, \n    topic: \"SelectProjectsOfUser\",\n    query: sqlQuery\n};\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 4380,
        "wires": [
            [
                "ed518214a6647435",
                "c560f2386300ae5a",
                "877036d0e4f83e0d"
            ]
        ]
    },
    {
        "id": "ed518214a6647435",
        "type": "mqtt out",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "",
        "topic": "server",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5304262e2bba2ec6",
        "x": 910,
        "y": 4380,
        "wires": []
    },
    {
        "id": "cb7fbbff04b5b197",
        "type": "mqtt in",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "",
        "topic": "response",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5304262e2bba2ec6",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1060,
        "y": 4380,
        "wires": [
            [
                "fc9e72304032d7f2"
            ]
        ]
    },
    {
        "id": "fc9e72304032d7f2",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "",
        "property": "payload.userid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "user_id",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1250,
        "y": 3900,
        "wires": [
            [
                "f164b3de75c79baa"
            ]
        ]
    },
    {
        "id": "425b2e202f4be8ff",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "debug 429",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 3860,
        "wires": []
    },
    {
        "id": "222771103d2e42b6",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "811226cf72cf022b",
        "name": "Send request Delete Project",
        "func": "var userId = flow.get('user_id'); // Get the flow variable 'user_id'\nvar projectId = msg.payload.projectid;\n\n// Construct the SQL DELETE statement\nvar sqlQuery = `\nDELETE FROM PROJECTSENSORS\nWHERE projectid = '${projectId}';\nDELETE FROM EVENTS\nWHERE projectid = '${projectId}';\nDELETE FROM PROJECTS \nWHERE projectid = '${projectId}'; \n`;\n\nmsg.payload = {\n    userid: userId,\n    topic: \"DeleteProject\",\n    query: sqlQuery\n};\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 4480,
        "wires": [
            [
                "a4f7bc1de3a207ec",
                "915c16c34c2301dd"
            ]
        ]
    },
    {
        "id": "a4f7bc1de3a207ec",
        "type": "mqtt out",
        "z": "34b9d5d8c870350c",
        "g": "811226cf72cf022b",
        "name": "",
        "topic": "server",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5304262e2bba2ec6",
        "x": 1850,
        "y": 4480,
        "wires": []
    },
    {
        "id": "599c1e8f2e43f55a",
        "type": "mqtt in",
        "z": "34b9d5d8c870350c",
        "g": "811226cf72cf022b",
        "name": "",
        "topic": "response",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5304262e2bba2ec6",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 2000,
        "y": 4480,
        "wires": [
            [
                "43eda9ab6c897f5d"
            ]
        ]
    },
    {
        "id": "8223faea8e253916",
        "type": "mqtt out",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "",
        "topic": "server",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5304262e2bba2ec6",
        "x": 2350,
        "y": 3860,
        "wires": []
    },
    {
        "id": "2e3f2a47ead1cbb3",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "Send request find ProjectID",
        "func": "var userId = flow.get('user_id'); // Get the flow variable 'user_id'\nvar currentProjectName = msg.payload.project;\n\nvar sqlQuery = `SELECT PROJECTID FROM PROJECTS WHERE PROJECTNAME = '${currentProjectName}';`; // Construct the SQL query\n\n\nmsg.payload = {\n    userid: userId,\n    topic: \"SelectProjectIdOfProjectClicked\",\n    query: sqlQuery\n};\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2140,
        "y": 3860,
        "wires": [
            [
                "8223faea8e253916"
            ]
        ]
    },
    {
        "id": "53b8013206b619ec",
        "type": "mqtt in",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "",
        "topic": "response",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5304262e2bba2ec6",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 2500,
        "y": 3860,
        "wires": [
            [
                "ad14678634bcb461"
            ]
        ]
    },
    {
        "id": "f164b3de75c79baa",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "",
        "property": "payload.topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SelectProjectsOfUser",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1390,
        "y": 3900,
        "wires": [
            [
                "babaaafdcf532812",
                "1fdcd1deddb1ed3a"
            ]
        ]
    },
    {
        "id": "f08bc6bca3db6984",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "",
        "property": "payload.topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SelectProjectIdOfProjectClicked",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2790,
        "y": 3860,
        "wires": [
            [
                "f15f5b5423da8093",
                "1e69d04fb98d7795",
                "bca9bada2019de1c",
                "75b59b4518215040"
            ]
        ]
    },
    {
        "id": "ad14678634bcb461",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "",
        "property": "payload.userid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "user_id",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2650,
        "y": 3860,
        "wires": [
            [
                "f08bc6bca3db6984"
            ]
        ]
    },
    {
        "id": "43d4e23437b6e3f6",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "811226cf72cf022b",
        "name": "",
        "property": "payload.topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "DeleteProject",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2310,
        "y": 4480,
        "wires": [
            [
                "2fedacabf9ffb6bd",
                "5192fca4dfcd4603"
            ]
        ]
    },
    {
        "id": "43eda9ab6c897f5d",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "811226cf72cf022b",
        "name": "",
        "property": "payload.userid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "user_id",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2150,
        "y": 4480,
        "wires": [
            [
                "43d4e23437b6e3f6"
            ]
        ]
    },
    {
        "id": "915c16c34c2301dd",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "811226cf72cf022b",
        "name": "debug 450",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 4540,
        "wires": []
    },
    {
        "id": "c560f2386300ae5a",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "debug 451",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 4320,
        "wires": []
    },
    {
        "id": "f0474a29fdd7dba7",
        "type": "change",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "user_name",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 4240,
        "wires": [
            [
                "6efde7f27af0b8a7"
            ]
        ]
    },
    {
        "id": "f15f5b5423da8093",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "debug 452",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2990,
        "y": 3800,
        "wires": []
    },
    {
        "id": "1e69d04fb98d7795",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "Send request delete in projectsensor",
        "func": "var userId = flow.get('user_id'); // Get the flow variable 'user_id'\nvar projectId = msg.payload.result[0].projectid;\n\nvar sqlQuery = `\nDELETE FROM PROJECTSENSORS \nWHERE PROJECTID = '${projectId}' \n`;\n\nmsg.payload = {\n    userid: userId,\n    topic: \"DeleteInProjectSensor\",\n    query: sqlQuery\n};\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3270,
        "y": 3940,
        "wires": [
            [
                "3f49338bdddaee7b"
            ]
        ]
    },
    {
        "id": "3f49338bdddaee7b",
        "type": "mqtt out",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "",
        "topic": "server",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5304262e2bba2ec6",
        "x": 3530,
        "y": 3940,
        "wires": []
    },
    {
        "id": "bca9bada2019de1c",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "Send request find ProjectID",
        "func": "\nvar userId = flow.get('user_id'); // Get the flow variable\nvar sqlQuery = `SELECT * FROM SENSORS WHERE USERID = ${userId};`; // Construct the SQL query\n\n\nmsg.payload = {\n    userid: userId,\n    topic: \"SelectSensorsOfUser\",\n    query: sqlQuery\n};\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3160,
        "y": 4060,
        "wires": [
            [
                "209d9691db58dc89",
                "e512873b732f38ee"
            ]
        ]
    },
    {
        "id": "209d9691db58dc89",
        "type": "mqtt out",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "",
        "topic": "server",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5304262e2bba2ec6",
        "x": 3370,
        "y": 4060,
        "wires": []
    },
    {
        "id": "e3606ae3381f4824",
        "type": "mqtt in",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "",
        "topic": "response",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5304262e2bba2ec6",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3520,
        "y": 4060,
        "wires": [
            [
                "ce9975e3ffb6d611"
            ]
        ]
    },
    {
        "id": "ce9975e3ffb6d611",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "",
        "property": "payload.userid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "user_id",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3670,
        "y": 4060,
        "wires": [
            [
                "de5de707d385c955"
            ]
        ]
    },
    {
        "id": "de5de707d385c955",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "",
        "property": "payload.topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SelectSensorsOfUser",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3810,
        "y": 4060,
        "wires": [
            [
                "e17c887d56f052c9",
                "38c6569860eaa961"
            ]
        ]
    },
    {
        "id": "e17c887d56f052c9",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "function 232",
        "func": "msg.payload = msg.payload.result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3370,
        "y": 4000,
        "wires": [
            [
                "8360d3de2f7ee442",
                "6ef76832d4b67ffc"
            ]
        ]
    },
    {
        "id": "38c6569860eaa961",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "debug 453",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3650,
        "y": 4160,
        "wires": []
    },
    {
        "id": "86fc3c74ba96da1c",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "Send request find SensorID",
        "func": "var userId = flow.get('user_id'); // Get the flow variable 'user_id'\n\n// Extract sensor names (filter out projectid)\nvar sensorNames = Object.keys(msg.payload)\n    .filter(key => key !== 'projectid')\n    .map(key => msg.payload[key]);\n\nvar sqlQuery = `\nSELECT SENSORID\nFROM SENSORS\nWHERE SENSORNAME IN (${sensorNames.map(name => `'${name}'`).join(', ')});\n`;\n\nmsg.payload = {\n    userid: userId,\n    topic: \"SelectSensorIdOnClick\",\n    query: sqlQuery\n};\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4060,
        "y": 4140,
        "wires": [
            [
                "dbeff8606ef5e5da"
            ]
        ]
    },
    {
        "id": "dbeff8606ef5e5da",
        "type": "mqtt out",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "",
        "topic": "server",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5304262e2bba2ec6",
        "x": 4270,
        "y": 4140,
        "wires": []
    },
    {
        "id": "70b92a87458db9a7",
        "type": "mqtt in",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "",
        "topic": "response",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5304262e2bba2ec6",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 4420,
        "y": 4140,
        "wires": [
            [
                "c19c58d27c3c89af"
            ]
        ]
    },
    {
        "id": "c19c58d27c3c89af",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "",
        "property": "payload.userid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "user_id",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 4570,
        "y": 4140,
        "wires": [
            [
                "bf4058d63691c556"
            ]
        ]
    },
    {
        "id": "bf4058d63691c556",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "",
        "property": "payload.topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SelectSensorIdOnClick",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 4710,
        "y": 4140,
        "wires": [
            [
                "3f4a80a79807962e",
                "dcad91a396725b5b"
            ]
        ]
    },
    {
        "id": "dcad91a396725b5b",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "function 233",
        "func": "var sensorIds = msg.payload.result;\nmsg.payload = {\n    sensorid: sensorIds\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4370,
        "y": 4060,
        "wires": [
            [
                "0c3e0cb106b24b0b",
                "50bc110297dc8f34"
            ]
        ]
    },
    {
        "id": "75b59b4518215040",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "function 234",
        "func": "var projectId = msg.payload.result[0].projectid;\nmsg.payload = {\n    projectid :projectId\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4370,
        "y": 4020,
        "wires": [
            [
                "0c3e0cb106b24b0b",
                "b6cd61db71ce2e49"
            ]
        ]
    },
    {
        "id": "b6cd61db71ce2e49",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "debug 454",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4530,
        "y": 3900,
        "wires": []
    },
    {
        "id": "50bc110297dc8f34",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "debug 455",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4510,
        "y": 3860,
        "wires": []
    },
    {
        "id": "78f33ef16c0e0553",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "Send request insert new projectsensors",
        "func": "// Function to generate a unique ID using Date.now() with high resolution\nfunction generateUniqueId(counter) {\n    return `${Date.now()}-${counter}`;\n}\n\n// Extract sensor IDs from the input structure\nvar sensorIds = msg.payload.sensorid.map(sensor => sensor.sensorid);\n\n// Extract project ID\nvar projectId = msg.payload.projectid;\n\n// Initialize a counter to ensure unique IDs\nvar counter = 0;\n\nvar userId = flow.get('user_id'); // Get the flow variable 'user_id'\n\nvar sqlQueries = sensorIds.map(sensorId => {\n    // Generate a unique ID with timestamp and counter\n    var projectsensorId = generateUniqueId(counter++);\n    return `\nINSERT INTO PROJECTSENSORS (\n    PROJECTSENSORID,\n    SENSORID,\n    PROJECTID\n) VALUES (\n    '${projectsensorId}',\n    '${sensorId}',\n    '${projectId}'\n)`;\n}).join(';\\n');\n\n// Add a semicolon after the last query\nsqlQueries += ';';\n\nmsg.payload = {\n    userid: userId,\n    topic: \"InsertProjectSensors\",\n    query: sqlQueries\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4920,
        "y": 4040,
        "wires": [
            [
                "c5686c0ef0124eef",
                "fbbbde6056f8527d"
            ]
        ]
    },
    {
        "id": "c5686c0ef0124eef",
        "type": "mqtt out",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "",
        "topic": "server",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5304262e2bba2ec6",
        "x": 5170,
        "y": 4040,
        "wires": []
    },
    {
        "id": "4ff6a28e1a8949fb",
        "type": "ui_ui_control",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "",
        "events": "change",
        "x": 860,
        "y": 4460,
        "wires": [
            []
        ]
    },
    {
        "id": "877036d0e4f83e0d",
        "type": "change",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"Main_Add_devices\",\"Main_DevicesConnected\",\"Main_Statistics\",\"Main_Logs\",\"Main_Map\",\"Main_Add_Project\",\"Main_Projects_Sensors\",\"Main_ChooseMapPoint\",\"Main_LogInPage\",\"Main_RegisterPage\"],\"show\":[\"Main_System\",\"Main_Settings\",\"Main_Projects\",\"Main_Buttons\",\"Main_ConnectionPage\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 4460,
        "wires": [
            [
                "4ff6a28e1a8949fb"
            ]
        ]
    },
    {
        "id": "6e79112d2b8fdba9",
        "type": "mqtt out",
        "z": "34b9d5d8c870350c",
        "g": "5876df96110f2210",
        "name": "",
        "topic": "server",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5304262e2bba2ec6",
        "x": 3470,
        "y": 4460,
        "wires": []
    },
    {
        "id": "13327eac639feaa6",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "5876df96110f2210",
        "name": "Send request create new Project",
        "func": "var projectId = Date.now();\nvar projectName = msg.payload.projectName;\nvar userId = flow.get('user_id'); \nvar alert = msg.payload.alert;\nvar alarm = msg.payload.alarm;\nvar alertType = msg.payload.alertType;\nvar alarmType = msg.payload.alarmType;\n\n\nvar sqlQuery = `INSERT INTO PROJECTS (\n    PROJECTID,\n    PROJECTNAME,\n    USERID,\n    ALERT,\n    ALARM,\n    ALERTTYPE,\n    ALARMTYPE\n    )\n    VALUES (\n        '${projectId}',\n        '${projectName}',\n        '${userId}',\n        '${alert}',\n        '${alarm}',\n        '${alertType}',\n        '${alarmType}'\n    );`;\n\nmsg.payload = {\n    userid: userId,\n    topic: \"CreateNewProject\",\n    query: sqlQuery\n};\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3230,
        "y": 4460,
        "wires": [
            [
                "6e79112d2b8fdba9"
            ]
        ]
    },
    {
        "id": "cec43d24d6d528e6",
        "type": "mqtt in",
        "z": "34b9d5d8c870350c",
        "g": "5876df96110f2210",
        "name": "",
        "topic": "response",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5304262e2bba2ec6",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3620,
        "y": 4460,
        "wires": [
            [
                "c6012ac18984803f"
            ]
        ]
    },
    {
        "id": "c6012ac18984803f",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "5876df96110f2210",
        "name": "",
        "property": "payload.userid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "user_id",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3770,
        "y": 4460,
        "wires": [
            [
                "51222d5502910ed2"
            ]
        ]
    },
    {
        "id": "51222d5502910ed2",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "5876df96110f2210",
        "name": "",
        "property": "payload.topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CreateNewProject",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3910,
        "y": 4460,
        "wires": [
            [
                "5192fca4dfcd4603"
            ]
        ]
    },
    {
        "id": "ffe43744f2319de3",
        "type": "mqtt in",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "",
        "topic": "response",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5304262e2bba2ec6",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 5320,
        "y": 4040,
        "wires": [
            [
                "5e0142638e12be4a"
            ]
        ]
    },
    {
        "id": "5e0142638e12be4a",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "",
        "property": "payload.userid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "user_id",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 5470,
        "y": 4040,
        "wires": [
            [
                "bb9b8a13ef55a079"
            ]
        ]
    },
    {
        "id": "bb9b8a13ef55a079",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "",
        "property": "payload.topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "InsertProjectSensors",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 5610,
        "y": 4040,
        "wires": [
            [
                "5192fca4dfcd4603"
            ]
        ]
    },
    {
        "id": "e512873b732f38ee",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "debug 474",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3290,
        "y": 4140,
        "wires": []
    },
    {
        "id": "1652bdb9fcb93e53",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "5876df96110f2210",
        "name": "debug 478",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2870,
        "y": 4400,
        "wires": []
    },
    {
        "id": "eb8f9b7fc62740f3",
        "type": "ui_chart",
        "z": "34b9d5d8c870350c",
        "g": "f845f07aab23c07d",
        "name": "Heatmap",
        "group": "5f317e2d5b63bb05",
        "order": 0,
        "width": "6",
        "height": "7",
        "label": "chart",
        "chartType": "radar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "{{{start_time}}}",
        "ymax": "{{{stop_time}}}",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1020,
        "y": 3140,
        "wires": [
            []
        ]
    },
    {
        "id": "29a96aee1ee4b36b",
        "type": "ui_chart",
        "z": "34b9d5d8c870350c",
        "g": "f845f07aab23c07d",
        "name": "Heatmap",
        "group": "5f317e2d5b63bb05",
        "order": 0,
        "width": "6",
        "height": "7",
        "label": "chart",
        "chartType": "radar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1020,
        "y": 3100,
        "wires": [
            []
        ]
    },
    {
        "id": "f8266762ca93caac",
        "type": "ui_template",
        "z": "34b9d5d8c870350c",
        "g": "f845f07aab23c07d",
        "group": "01850909bba97cea",
        "name": "",
        "order": 4,
        "width": "6",
        "height": "7",
        "format": "<table style=\"width:100%\">\n  <tr>\n    <th>Logs</th> \n  </tr>\n    <td>{{msg.payload}}</td>\n  </tr>\n</table>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1020,
        "y": 3200,
        "wires": [
            []
        ]
    },
    {
        "id": "a82dc46322bd6696",
        "type": "inject",
        "z": "34b9d5d8c870350c",
        "g": "f845f07aab23c07d",
        "name": "timestamp",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 780,
        "y": 3200,
        "wires": [
            [
                "f8266762ca93caac",
                "e7485ebe65cac3f3"
            ]
        ]
    },
    {
        "id": "e7485ebe65cac3f3",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "f845f07aab23c07d",
        "name": "debug 481",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 3260,
        "wires": []
    },
    {
        "id": "c81138490f611e60",
        "type": "ui_ui_control",
        "z": "34b9d5d8c870350c",
        "g": "9882f8881258abcd",
        "name": "",
        "events": "all",
        "x": 680,
        "y": 2740,
        "wires": [
            []
        ]
    },
    {
        "id": "b76bd6ce96afc622",
        "type": "ui_button",
        "z": "34b9d5d8c870350c",
        "g": "9882f8881258abcd",
        "name": "",
        "group": "8f0a6d83b373cd31",
        "order": 6,
        "width": "5",
        "height": "1",
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "devices",
        "payload": "{\"group\":{\"hide\":[\"Main_System\",\"Main_Settings\",\"Main_Statistics\",\"Main_Logs\",\"Main_Map\",\"Main_Add_Project\",\"Main_ConnectionPage\",\"Main_Projects\",\"Main_Projects_Sensors\",\"Main_ChooseMapPoint\",\"Main_LogInPage\",\"Main_RegisterPage\"],\"show\":[\"Main_Add_devices\",\"Main_DevicesConnected\",\"Main_Buttons\"]}}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 350,
        "y": 2700,
        "wires": [
            [
                "c81138490f611e60",
                "d8d3fced1348bb0c",
                "8c9732af324e5622",
                "1bd26aea54c25a1d",
                "3735f1987bea386c"
            ]
        ]
    },
    {
        "id": "9dca964bc9c61e2c",
        "type": "ui_button",
        "z": "34b9d5d8c870350c",
        "g": "9882f8881258abcd",
        "name": "",
        "group": "8f0a6d83b373cd31",
        "order": 8,
        "width": "5",
        "height": "1",
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "info",
        "payload": "{\"group\":{\"hide\":[\"Main_System\",\"Main_Settings\",\"Main_Add_devices\",\"Main_DevicesConnected\",\"Main_Map\",\"Main_ConnectionPage\",\"Main_Add_Project\",\"Main_Projects\",\"Main_Projects_Sensors\",\"Main_ChooseMapPoint\",\"Main_LogInPage\",\"Main_RegisterPage\"],\"show\":[\"Main_Statistics\",\"Main_Logs\",\"Main_Buttons\"]}}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 350,
        "y": 2760,
        "wires": [
            [
                "c81138490f611e60",
                "d8d3fced1348bb0c"
            ]
        ]
    },
    {
        "id": "499b0852ecf4c9e3",
        "type": "inject",
        "z": "34b9d5d8c870350c",
        "g": "9882f8881258abcd",
        "name": "Input Coordinates",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 2880,
        "wires": [
            [
                "e1ca5b4722dc3d8a"
            ]
        ]
    },
    {
        "id": "e1ca5b4722dc3d8a",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "9882f8881258abcd",
        "name": "Generate Coordinates",
        "func": "msg.payload = [\n    {lat: 41.488449134440025, lon: 2.2859207425909314, name: \"Field 1\"},\n    {lat: 41.48954213764042, lon: 2.286446455547156, name: \"Shed\"},\n    {lat: 41.48899563834522, lon: 2.2854808603214365, name: \"Pond\"},\n    {lat: 41.48969361211497, lon: 2.284284632323722, name: \"Field 2\"}\n];\n\n// You can add logic here to dynamically generate or modify coordinates\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 2880,
        "wires": [
            []
        ]
    },
    {
        "id": "d8d3fced1348bb0c",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "9882f8881258abcd",
        "name": "debug 483",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 2820,
        "wires": []
    },
    {
        "id": "02dc441daaf6d2d9",
        "type": "inject",
        "z": "34b9d5d8c870350c",
        "g": "9882f8881258abcd",
        "name": "Input Coordinates",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 2960,
        "wires": [
            [
                "f4d95081c3b4d67e"
            ]
        ]
    },
    {
        "id": "f4d95081c3b4d67e",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "9882f8881258abcd",
        "name": "Generate Coordinates",
        "func": "msg.payload = {\n    name: \"Point A\",\n    lat: 48.863706,\n    lon: 2.305821,\n    layer: \"Markers\",\n    icon: \"fa-map-marker\",\n    iconColor: \"red\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 2960,
        "wires": [
            []
        ]
    },
    {
        "id": "8839912a3c6141cf",
        "type": "inject",
        "z": "34b9d5d8c870350c",
        "g": "9882f8881258abcd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1080,
        "y": 2920,
        "wires": [
            [
                "75eeee7cfbadaf2c"
            ]
        ]
    },
    {
        "id": "75eeee7cfbadaf2c",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "9882f8881258abcd",
        "name": "function 238",
        "func": "msg.payload = {\n    \"name\": \"Worldmap\",\n    \"lat\": 48.515,\n    \"lon\": 2.1235\n};\n\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 2920,
        "wires": [
            []
        ]
    },
    {
        "id": "7fc890cfee7bbd25",
        "type": "ui_chart",
        "z": "34b9d5d8c870350c",
        "g": "6e188423aa48f4f7",
        "name": "Heatmap",
        "group": "5f317e2d5b63bb05",
        "order": 0,
        "width": "6",
        "height": "7",
        "label": "chart",
        "chartType": "radar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "{{{start_time}}}",
        "ymax": "{{{stop_time}}}",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1400,
        "y": 3160,
        "wires": [
            []
        ]
    },
    {
        "id": "a693b98e58a57d20",
        "type": "ui_chart",
        "z": "34b9d5d8c870350c",
        "g": "6e188423aa48f4f7",
        "name": "Heatmap",
        "group": "5f317e2d5b63bb05",
        "order": 0,
        "width": "6",
        "height": "7",
        "label": "chart",
        "chartType": "radar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1400,
        "y": 3100,
        "wires": [
            []
        ]
    },
    {
        "id": "16661bf467c5cd6f",
        "type": "inject",
        "z": "34b9d5d8c870350c",
        "g": "6e188423aa48f4f7",
        "name": "timestamp",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1240,
        "y": 3220,
        "wires": [
            [
                "06f2a57eb41ccf16",
                "361cc174d51639f0"
            ]
        ]
    },
    {
        "id": "06f2a57eb41ccf16",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "6e188423aa48f4f7",
        "name": "debug 484",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 3300,
        "wires": []
    },
    {
        "id": "361cc174d51639f0",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "6e188423aa48f4f7",
        "name": "Check Events",
        "func": "var events = global.get('events') || [];\nif (events.length > 0) {\n    msg.payload = '<table style=\"width:100%\"><tr><th>Logs</th></tr>';\n    events.forEach(function(event) {\n        msg.payload += '<tr><td>' + event + '</td></tr>';\n    });\n    msg.payload += '</table>';\n} else {\n    msg.payload = 'No logs';\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 3220,
        "wires": [
            [
                "0db351623e9b08c6"
            ]
        ]
    },
    {
        "id": "0db351623e9b08c6",
        "type": "ui_template",
        "z": "34b9d5d8c870350c",
        "g": "6e188423aa48f4f7",
        "group": "01850909bba97cea",
        "name": "Logs Template 1",
        "order": 4,
        "width": "6",
        "height": "7",
        "format": "{{msg.payload}}",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1620,
        "y": 3220,
        "wires": [
            []
        ]
    },
    {
        "id": "3baeed0652dc00e9",
        "type": "postgresql",
        "z": "34b9d5d8c870350c",
        "g": "6e188423aa48f4f7",
        "name": "",
        "query": "SELECT * FROM EVENTS ORDER BY TIMESTAMP DESC LIMIT 100;",
        "postgreSQLConfig": "2f83b7b4583ea4d6",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 410,
        "y": 3260,
        "wires": [
            [
                "bfda0695d496c0fa"
            ]
        ]
    },
    {
        "id": "bfda0695d496c0fa",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "6e188423aa48f4f7",
        "name": "function 239",
        "func": "msg.payload = msg.payload.map(row => ({\n    timestamp: row.TIMESTAMP,\n    sensorid: row.SENSORID,\n    sensorname: row.SENSORNAME,\n    gpscord: row.GPSCORD\n}));\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 3260,
        "wires": [
            []
        ]
    },
    {
        "id": "a2b75f12130ec16a",
        "type": "inject",
        "z": "34b9d5d8c870350c",
        "g": "6e188423aa48f4f7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 340,
        "y": 3200,
        "wires": [
            [
                "3baeed0652dc00e9"
            ]
        ]
    },
    {
        "id": "0a9cf1440f06c91c",
        "type": "ui_toast",
        "z": "34b9d5d8c870350c",
        "g": "7ef8e6befb66d169",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Alarm status notification",
        "x": 990,
        "y": 3580,
        "wires": []
    },
    {
        "id": "e3e686507ad59eda",
        "type": "ui_switch",
        "z": "34b9d5d8c870350c",
        "g": "7ef8e6befb66d169",
        "name": "",
        "label": "Alarm",
        "tooltip": "",
        "group": "d1274cb918772441",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "SearchLight ON",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "SearchLight OFF",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 750,
        "y": 3580,
        "wires": [
            [
                "0a9cf1440f06c91c",
                "7243f2ace301fdbf"
            ]
        ]
    },
    {
        "id": "4e40b973b3e252d0",
        "type": "change",
        "z": "34b9d5d8c870350c",
        "g": "7ef8e6befb66d169",
        "name": "Reset start time",
        "rules": [
            {
                "t": "set",
                "p": "start_time",
                "pt": "global",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1180,
        "y": 3640,
        "wires": [
            []
        ]
    },
    {
        "id": "7243f2ace301fdbf",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "7ef8e6befb66d169",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "On",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Off",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 990,
        "y": 3660,
        "wires": [
            [
                "4e40b973b3e252d0",
                "5a3917253c3fd05c"
            ],
            []
        ]
    },
    {
        "id": "5a3917253c3fd05c",
        "type": "change",
        "z": "34b9d5d8c870350c",
        "g": "7ef8e6befb66d169",
        "name": "Set stop time",
        "rules": [
            {
                "t": "set",
                "p": "stop_time",
                "pt": "global",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1170,
        "y": 3680,
        "wires": [
            []
        ]
    },
    {
        "id": "863d0aad6f30e757",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "b2914cad12f12188",
        "name": "Extract SSIDs",
        "func": "var output = msg.payload.toString('utf8');\n\n// Clean up the string\noutput = output.replace(/[\\uFFFD\\u00a0\\u00e9]/g, '');\noutput = output.replace(/\\r/g, '').trim();\n\n// Split into lines\nvar lines = output.split('\\n');\n\n// Initialize array for SSIDs\nvar ssids = [];\n\nlines.forEach(line => {\n    line = line.trim();\n    if (line.startsWith('SSID')) {\n        var ssid = line.split(':')[1].trim();\n        if (ssid !== '') {\n            ssids.push(ssid);\n        }\n    }\n});\n\nmsg.payload = ssids;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 876.6666870117188,
        "y": 1272.6666259765625,
        "wires": [
            [
                "958518cefb3fadcf",
                "fdd886c87a6b6ae4"
            ]
        ]
    },
    {
        "id": "958518cefb3fadcf",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "b2914cad12f12188",
        "name": "SSID Results",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1066.6666870117188,
        "y": 1232.6666259765625,
        "wires": []
    },
    {
        "id": "3e8d7f5f98218497",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "b2914cad12f12188",
        "name": "Buffer to String",
        "func": "msg.payload = msg.payload.toString();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 876.6666870117188,
        "y": 1212.6666259765625,
        "wires": [
            [
                "8af83b8ff402cd65"
            ]
        ]
    },
    {
        "id": "8af83b8ff402cd65",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "b2914cad12f12188",
        "name": "Scan Results",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1066.6666870117188,
        "y": 1172.6666259765625,
        "wires": []
    },
    {
        "id": "8c9732af324e5622",
        "type": "exec",
        "z": "34b9d5d8c870350c",
        "g": "b2914cad12f12188",
        "command": "netsh wlan show networks",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "WiFi Scan (Windows)",
        "x": 616.6666870117188,
        "y": 1272.6666259765625,
        "wires": [
            [
                "08f5077c188b0f86",
                "3e8d7f5f98218497",
                "863d0aad6f30e757"
            ],
            [],
            []
        ]
    },
    {
        "id": "601f371c7f43f424",
        "type": "exec",
        "z": "34b9d5d8c870350c",
        "g": "b2914cad12f12188",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Connect to WiFi (Windows)",
        "x": 636.6666870117188,
        "y": 1332.6666259765625,
        "wires": [
            [
                "5751e7ae949fc2c0",
                "c642f469e6582fa1"
            ],
            [],
            []
        ]
    },
    {
        "id": "08f5077c188b0f86",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "b2914cad12f12188",
        "name": "ddd",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 866.6666870117188,
        "y": 1112.6666259765625,
        "wires": []
    },
    {
        "id": "fdd886c87a6b6ae4",
        "type": "ui_template",
        "z": "34b9d5d8c870350c",
        "g": "b2914cad12f12188",
        "group": "d5c1e5202f4e4b5c",
        "name": "Wifi networks available",
        "order": 4,
        "width": "4",
        "height": "8",
        "format": "<script>\n(function(scope) {\n    scope.handleClick = function(item) {\n        // You can customize this function to handle the button click\n        // For now, we'll just log the clicked item to the console\n        console.log('Clicked:', item);\n        // You might want to send this item back to Node-RED\n        scope.send({payload: item});\n    };\n\n    scope.$watch('msg', function(msg) {\n        if (msg && msg.payload && Array.isArray(msg.payload)) {\n            var container = document.getElementById('payloadContainer');\n            container.innerHTML = ''; // Clear existing buttons\n            \n            msg.payload.forEach(function(item, index) {\n                var button = document.createElement('button');\n                button.textContent = index + ': ' + item;\n                button.onclick = function() {\n                    scope.handleClick(item);\n                };\n                button.className = 'payload-button';\n                container.appendChild(button);\n            });\n        }\n    });\n})(scope);\n</script>\n\n<style>\n    .payload-button {\n        display: block;\n        width: 100%;\n        padding: 10px;\n        margin: 5px 0;\n        text-align: left;\n        background-color: #f0f0f0;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        cursor: pointer;\n    }\n    .payload-button:hover {\n        background-color: #e0e0e0;\n    }\n</style>\n\n<h3>Wifi Networks</h3>\n<div id=\"payloadContainer\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1156.6666870117188,
        "y": 1272.6666259765625,
        "wires": [
            [
                "9d5047feffd5899d",
                "b718ba73e32b6b9b",
                "995fa744c4f5db51"
            ]
        ]
    },
    {
        "id": "24c1307400c59c34",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "9924e091cb0b7f26",
        "name": "url definer",
        "func": "// Define the IP address variable\nvar ip_address = msg.payload.ip;\nconst newSSID = 'SSS';\nconst newPassword = 'canpicard&&&';\n\n// Construct the URL to set MQTT parameters\nmsg.url1 = `http://192.168.33.1/settings?mqtt_server=cp-localmqtt.com`;\nmsg.url2 = `http://192.168.33.1/settings?mqtt_enable=true`;\nmsg.url3 = `http://192.168.33.1/reboot`;\n\n// Construct the URL to set wifi settings\nmsg.url4 = `http://192.168.33.1/settings/sta?ssid=SSS`;\nmsg.url5 = `http://192.168.33.1/settings/sta?key=canpicard&&&`;\nmsg.url6 = `http://192.168.33.1/settings/sta?enabled=true`;\n//msg.url4 = `http://192.168.33.1//settings/sta?ssid=${encodeURIComponent(newSSID)}&key=${encodeURIComponent(newPassword)}`;\n//msg.url4 = `http://192.168.33.1//settings/sta?ssid=SSS&key=canpicard&&&`;\n\n\nmsg.ssid = encodeURIComponent(newSSID);\nmsg.password = encodeURIComponent(newPassword);\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 496.66668701171875,
        "y": 1572.6666259765625,
        "wires": [
            [
                "2e91f6b329dfed2c",
                "22ee290bd84b9d77",
                "d0473fe29f9f4b10",
                "e7ba9ec418683450",
                "12d1e5ef804518ce"
            ]
        ]
    },
    {
        "id": "22ee290bd84b9d77",
        "type": "http request",
        "z": "34b9d5d8c870350c",
        "g": "9924e091cb0b7f26",
        "name": "mqtt server",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{url1}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 706.6666870117188,
        "y": 1532.6666259765625,
        "wires": [
            [
                "b4208de64e8cdf56",
                "8ff4c89e81292998"
            ]
        ]
    },
    {
        "id": "d0473fe29f9f4b10",
        "type": "http request",
        "z": "34b9d5d8c870350c",
        "g": "9924e091cb0b7f26",
        "name": "mqtt enable",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{url2}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 706.6666870117188,
        "y": 1592.6666259765625,
        "wires": [
            [
                "b4208de64e8cdf56",
                "8ff4c89e81292998"
            ]
        ]
    },
    {
        "id": "e7ba9ec418683450",
        "type": "http request",
        "z": "34b9d5d8c870350c",
        "d": true,
        "g": "9924e091cb0b7f26",
        "name": "device reboot",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{url3}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 716.6666870117188,
        "y": 1652.6666259765625,
        "wires": [
            [
                "fe51b824103cfb59"
            ]
        ]
    },
    {
        "id": "b4208de64e8cdf56",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "9924e091cb0b7f26",
        "name": "debug 503",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 896.6666870117188,
        "y": 1592.6666259765625,
        "wires": []
    },
    {
        "id": "2e91f6b329dfed2c",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "9924e091cb0b7f26",
        "name": "debug 504",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 696.6666870117188,
        "y": 1492.6666259765625,
        "wires": []
    },
    {
        "id": "12d1e5ef804518ce",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "9924e091cb0b7f26",
        "name": "debug 505",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 446.66668701171875,
        "y": 1712.6666259765625,
        "wires": []
    },
    {
        "id": "74a2d3536f247f90",
        "type": "inject",
        "z": "34b9d5d8c870350c",
        "g": "9924e091cb0b7f26",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 296.66668701171875,
        "y": 1572.6666259765625,
        "wires": [
            [
                "24c1307400c59c34"
            ]
        ]
    },
    {
        "id": "fe51b824103cfb59",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "9924e091cb0b7f26",
        "name": "debug 506",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 926.6666870117188,
        "y": 1652.6666259765625,
        "wires": []
    },
    {
        "id": "df3f37f462e2c43e",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "9924e091cb0b7f26",
        "name": "Prepare STA Enable Request",
        "func": "const shellyIP = '192.168.33.1';\nconst ssid = 'SSS';\nconst password = 'canpicard&&&';\n\nreturn {\n    url: `http://${shellyIP}/settings/sta?enabled=1&ssid=${encodeURIComponent(ssid)}&key=${encodeURIComponent(password)}`,\n    method: 'GET'\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1076.6666870117188,
        "y": 1532.6666259765625,
        "wires": [
            [
                "5ca5d5cbedd76c42"
            ]
        ]
    },
    {
        "id": "599626f17e96064d",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "9924e091cb0b7f26",
        "name": "Debug Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1676.6666870117188,
        "y": 1532.6666259765625,
        "wires": []
    },
    {
        "id": "5ca5d5cbedd76c42",
        "type": "http request",
        "z": "34b9d5d8c870350c",
        "g": "9924e091cb0b7f26",
        "name": "Send STA Enable Request",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1396.6666870117188,
        "y": 1532.6666259765625,
        "wires": [
            [
                "599626f17e96064d",
                "77d3ed8ff86c768a"
            ]
        ]
    },
    {
        "id": "8ff4c89e81292998",
        "type": "join",
        "z": "34b9d5d8c870350c",
        "g": "9924e091cb0b7f26",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 866.6666870117188,
        "y": 1532.6666259765625,
        "wires": [
            [
                "df3f37f462e2c43e"
            ]
        ]
    },
    {
        "id": "9d5047feffd5899d",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "b2914cad12f12188",
        "name": "debug 507",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1286.6666870117188,
        "y": 1232.6666259765625,
        "wires": []
    },
    {
        "id": "6fe686c8f73ff52d",
        "type": "ui_button",
        "z": "34b9d5d8c870350c",
        "g": "b2914cad12f12188",
        "name": "",
        "group": "d5c1e5202f4e4b5c",
        "order": 6,
        "width": "1",
        "height": "1",
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "refresh",
        "payload": "refresh",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 506.66668701171875,
        "y": 1172.6666259765625,
        "wires": [
            [
                "8c9732af324e5622"
            ]
        ]
    },
    {
        "id": "b718ba73e32b6b9b",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "b2914cad12f12188",
        "name": "Send connection command",
        "func": "\nvar sensorAP = msg.payload;\nmsg.payload = `netsh wlan connect name=\"${sensorAP}\"`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 336.66668701171875,
        "y": 1332.6666259765625,
        "wires": [
            [
                "601f371c7f43f424"
            ]
        ]
    },
    {
        "id": "5751e7ae949fc2c0",
        "type": "delay",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 720,
        "y": 1420,
        "wires": [
            [
                "24c1307400c59c34"
            ]
        ]
    },
    {
        "id": "77d3ed8ff86c768a",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "9924e091cb0b7f26",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "Error",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1506.6666870117188,
        "y": 1592.6666259765625,
        "wires": [
            [
                "91f1c5d7a0351569"
            ],
            [
                "03410f666a0f30c9",
                "aa85e9a4bef663d1",
                "3e0186213663d669"
            ]
        ]
    },
    {
        "id": "320633a82b9b5482",
        "type": "ui_toast",
        "z": "34b9d5d8c870350c",
        "g": "9924e091cb0b7f26",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1866.6666870117188,
        "y": 1592.6666259765625,
        "wires": []
    },
    {
        "id": "91f1c5d7a0351569",
        "type": "change",
        "z": "34b9d5d8c870350c",
        "g": "9924e091cb0b7f26",
        "name": "User not found",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Shelly access point not found",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1676.6666870117188,
        "y": 1592.6666259765625,
        "wires": [
            [
                "320633a82b9b5482"
            ]
        ]
    },
    {
        "id": "ad32fa0385c4f213",
        "type": "ui_toast",
        "z": "34b9d5d8c870350c",
        "g": "9924e091cb0b7f26",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1866.6666870117188,
        "y": 1632.6666259765625,
        "wires": []
    },
    {
        "id": "03410f666a0f30c9",
        "type": "change",
        "z": "34b9d5d8c870350c",
        "g": "9924e091cb0b7f26",
        "name": "User not found",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Shelly access point connected",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1676.6666870117188,
        "y": 1632.6666259765625,
        "wires": [
            [
                "ad32fa0385c4f213"
            ]
        ]
    },
    {
        "id": "d439943da55b43cf",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "80a73ffb26033b8b",
        "name": "Send request to add new Sensor",
        "func": "var sensorId = msg.payload.sensorId;\nvar sensorType = msg.payload.sensorType;\nvar sensorName = msg.payload.sensorname;\nvar ip = msg.payload.ip;\nvar gpsCoordinate = msg.payload.sensorgps;\nvar userId = flow.get('user_id'); // Get the flow variable 'user_id'\n\n\n// Construct the SQL INSERT statement using parameterized queries for safety\nvar sqlQuery = `\n    INSERT INTO SENSORS (\n        SENSORID, \n        SENSORNAME,\n        SENSORTYPE, \n        SENSORGPS,\n        SENSORIP, \n        USERID\n    ) VALUES (\n        '${sensorId}', \n        '${sensorName}', \n        '${sensorType}', \n        '${gpsCoordinate}',\n        '${ip}', \n        '${userId}'\n    );\n`;\nmsg.payload = {\n    userid: userId,\n    topic: \"InsertNewSensor\",\n    query: sqlQuery\n};\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3256.6666870117188,
        "y": 1512.6666259765625,
        "wires": [
            [
                "242e9e40b42a944e",
                "2e36a5554d6457c2"
            ]
        ]
    },
    {
        "id": "242e9e40b42a944e",
        "type": "mqtt out",
        "z": "34b9d5d8c870350c",
        "g": "80a73ffb26033b8b",
        "name": "",
        "topic": "server",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5304262e2bba2ec6",
        "x": 3486.6666870117188,
        "y": 1512.6666259765625,
        "wires": []
    },
    {
        "id": "d218d79c9abdd740",
        "type": "ui_form",
        "z": "34b9d5d8c870350c",
        "d": true,
        "g": "16d5787ce3c49dd5",
        "name": "",
        "label": "",
        "group": "d5c1e5202f4e4b5c",
        "order": 7,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Sensor Name",
                "value": "sensorName",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "GPS Coordinates",
                "value": "sensorGps",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Ip Address",
                "value": "ip",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "sensorName": "",
            "sensorGps": "",
            "ip": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 2566.6666870117188,
        "y": 1272.6666259765625,
        "wires": [
            [
                "5d8e1008ea04af02",
                "0963749f50b7024f"
            ]
        ]
    },
    {
        "id": "c642f469e6582fa1",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "b2914cad12f12188",
        "name": "debug 508",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 966.6666870117188,
        "y": 1332.6666259765625,
        "wires": []
    },
    {
        "id": "a67b264ee32bf7c9",
        "type": "join",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2166.6666870117188,
        "y": 1272.6666259765625,
        "wires": [
            [
                "7f8d60b541220f2a",
                "6d5c917c6ca6f011"
            ]
        ]
    },
    {
        "id": "aa85e9a4bef663d1",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "9924e091cb0b7f26",
        "name": "debug 510",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1686.6666870117188,
        "y": 1712.6666259765625,
        "wires": []
    },
    {
        "id": "995fa744c4f5db51",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "Data conversion",
        "func": "msg.payload = {\n    sensor: msg.payload,\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1556.6666870117188,
        "y": 1272.6666259765625,
        "wires": [
            [
                "a67b264ee32bf7c9"
            ]
        ]
    },
    {
        "id": "7f8d60b541220f2a",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "Data conversion",
        "func": "// Assume the payload is in the format \"shellymotionsensor-BC33AC023146\"\nvar data = msg.payload.sensor.split('-');\nvar sensortype = data[0];\nvar sensorid = data[1];\n\nmsg.payload = {\n    sensorId: sensorid,\n    sensorType: sensortype\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2336.6666870117188,
        "y": 1272.6666259765625,
        "wires": [
            [
                "d218d79c9abdd740",
                "d2611546c11ee271",
                "0963749f50b7024f",
                "aad821d5b5b49089"
            ]
        ]
    },
    {
        "id": "5d8e1008ea04af02",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "debug 511",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2786.6666870117188,
        "y": 1252.6666259765625,
        "wires": []
    },
    {
        "id": "d2611546c11ee271",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "debug 512",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2326.6666870117188,
        "y": 1192.6666259765625,
        "wires": []
    },
    {
        "id": "0963749f50b7024f",
        "type": "join",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2626.6666870117188,
        "y": 1352.6666259765625,
        "wires": [
            [
                "c8fb08cb2d5587d8",
                "c1a3c44afc3aa0a8"
            ]
        ]
    },
    {
        "id": "c8fb08cb2d5587d8",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "debug 513",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2826.6666870117188,
        "y": 1352.6666259765625,
        "wires": []
    },
    {
        "id": "a2adc02e8ab8b576",
        "type": "mqtt in",
        "z": "34b9d5d8c870350c",
        "g": "80a73ffb26033b8b",
        "name": "",
        "topic": "response",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5304262e2bba2ec6",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3636.6666870117188,
        "y": 1512.6666259765625,
        "wires": [
            [
                "13f7c8d52741541a"
            ]
        ]
    },
    {
        "id": "13f7c8d52741541a",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "80a73ffb26033b8b",
        "name": "",
        "property": "payload.userid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "user_id",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3766.6666870117188,
        "y": 1512.6666259765625,
        "wires": [
            [
                "0119ad0b5c119228"
            ]
        ]
    },
    {
        "id": "0119ad0b5c119228",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "80a73ffb26033b8b",
        "name": "",
        "property": "payload.topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "InsertNewSensor",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3886.6666870117188,
        "y": 1512.6666259765625,
        "wires": [
            [
                "67f72ab87c077470",
                "1bd26aea54c25a1d"
            ]
        ]
    },
    {
        "id": "67f72ab87c077470",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "80a73ffb26033b8b",
        "name": "debug 514",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3866.6666870117188,
        "y": 1332.6666259765625,
        "wires": []
    },
    {
        "id": "3730f1a9a47601e9",
        "type": "mqtt in",
        "z": "34b9d5d8c870350c",
        "g": "80a73ffb26033b8b",
        "name": "",
        "topic": "response",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5304262e2bba2ec6",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3636.6666870117188,
        "y": 1632.6666259765625,
        "wires": [
            [
                "3f0e420ba6fb02af"
            ]
        ]
    },
    {
        "id": "1bd26aea54c25a1d",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "80a73ffb26033b8b",
        "name": "Send request to select user Sensors",
        "func": "var sensorId = msg.payload.sensorId;\nvar sensorType = msg.payload.sensorType;\nvar sensorName = msg.payload.sensorName;\nvar ip = msg.payload.ip;\nvar gpsCoordinate = msg.payload.sensorGps;\nvar userId = flow.get('user_id'); // Get the flow variable 'user_id'\n\n\n// Construct the SQL INSERT statement using parameterized queries for safety\nvar sqlQuery = `SELECT * FROM SENSORS WHERE USERID = '${userId}';`; // Construct the SQL query\n\nmsg.payload = {\n    userid: userId,\n    topic: \"SelectUserSensors\",\n    query: sqlQuery\n};\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3266.6666870117188,
        "y": 1632.6666259765625,
        "wires": [
            [
                "9bff665941532f61"
            ]
        ]
    },
    {
        "id": "9bff665941532f61",
        "type": "mqtt out",
        "z": "34b9d5d8c870350c",
        "g": "80a73ffb26033b8b",
        "name": "",
        "topic": "server",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5304262e2bba2ec6",
        "x": 3486.6666870117188,
        "y": 1632.6666259765625,
        "wires": []
    },
    {
        "id": "3f0e420ba6fb02af",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "80a73ffb26033b8b",
        "name": "",
        "property": "payload.userid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "user_id",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3766.6666870117188,
        "y": 1632.6666259765625,
        "wires": [
            [
                "51c9f4584955f960"
            ]
        ]
    },
    {
        "id": "51c9f4584955f960",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "80a73ffb26033b8b",
        "name": "",
        "property": "payload.topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SelectUserSensors",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3886.6666870117188,
        "y": 1632.6666259765625,
        "wires": [
            [
                "7a67d3528e55f960",
                "cab3b61bfe625e8f"
            ]
        ]
    },
    {
        "id": "0b53c379f1720525",
        "type": "ui_template",
        "z": "34b9d5d8c870350c",
        "g": "80a73ffb26033b8b",
        "group": "c94f5149bba263cf",
        "name": "Sensor list",
        "order": 4,
        "width": "12",
        "height": "7",
        "format": "<div>\n  <style>\n    .square-button {\n      width: 50px; /* Adjust width as needed */\n      height: 50px; /* Adjust height to match width for square shape */\n      border: none; /* Remove default button border */\n      background-color: #007bff; /* Button background color */\n      color: white; /* Button text color */\n      font-size: 14px; /* Font size */\n      cursor: pointer; /* Cursor style on hover */\n      border-radius: 5px; /* Optional: Rounded corners */\n    }\n\n    .no-devices {\n      text-align: center;\n      font-size: 18px;\n      color: #999;\n      padding: 20px;\n    }\n  </style>\n\n  <table style=\"width:100%\">\n    <tbody>\n      <tr ng-if=\"devices.length === 0\">\n        <td colspan=\"8\" class=\"no-devices\">No devices connected</td>\n      </tr>\n      <tr ng-repeat=\"device in devices\">\n        <td>{{$index + 1}}</td>\n        <td>{{device.sensorid}}</td>\n        <td>{{device.sensorname}}</td>\n        <td>{{device.sensortype}}</td>\n        <td>{{device.ip}}</td>\n        <td>{{device.gpscord}}</td>\n        <td><button class=\"square-button\" ng-click=\"handleButtonClick(device)\">Disconnect</button></td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n\n<script>\n  (function(scope) {\n    // Initialize devices array to store connected devices\n    scope.devices = [];\n\n    // Function to handle button click event\n    scope.handleButtonClick = function(device) {\n      console.log(\"Disconnecting device:\", device);\n      // Find index of device in the devices array\n      var index = scope.devices.indexOf(device);\n      if (index !== -1) {\n        // Remove device from devices array\n        scope.devices.splice(index, 1);\n        // Optionally, emit message to Node-RED flow for further processing\n        scope.send({ payload: device }); // Send message indicating device disconnection\n      }\n    };\n\n    // Watch for changes in the msg object (assuming it contains devices array)\n    scope.$watch('msg', function(msg) {\n      if (msg.payload && Array.isArray(msg.payload)) {\n        scope.devices = msg.payload; // Update devices array with new devices\n      }\n    });\n  })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3406.6666870117188,
        "y": 1712.6666259765625,
        "wires": [
            [
                "c529467fd81c23a6"
            ]
        ]
    },
    {
        "id": "c529467fd81c23a6",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "e5e10a03c765f635",
        "name": "Send request to delete Sensor",
        "func": "\nvar userId = flow.get('user_id'); // Get the flow variable 'user_id'\nvar sensorId = msg.payload.sensorid;\n\n// Construct the SQL DELETE statement\nvar sqlQuery = `\nDELETE FROM PROJECTSENSORS\nWHERE sensorId = '${sensorId}';\nDELETE FROM EVENTS\nWHERE sensorId = '${sensorId}';\nDELETE FROM SENSORS \nWHERE sensorId = '${sensorId}';\n`;\n\nmsg.payload = {\n    userid: userId,\n    topic: \"DeleteSensor\",\n    query: sqlQuery\n};\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3266.6666870117188,
        "y": 1872.6666259765625,
        "wires": [
            [
                "76bec8ce0440d5f5"
            ]
        ]
    },
    {
        "id": "76bec8ce0440d5f5",
        "type": "mqtt out",
        "z": "34b9d5d8c870350c",
        "g": "e5e10a03c765f635",
        "name": "",
        "topic": "server",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5304262e2bba2ec6",
        "x": 3506.6666870117188,
        "y": 1872.6666259765625,
        "wires": []
    },
    {
        "id": "18ce4bb31616f5bf",
        "type": "mqtt in",
        "z": "34b9d5d8c870350c",
        "g": "e5e10a03c765f635",
        "name": "",
        "topic": "response",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5304262e2bba2ec6",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3656.6666870117188,
        "y": 1872.6666259765625,
        "wires": [
            [
                "d0aa3cb322182cfb"
            ]
        ]
    },
    {
        "id": "d0aa3cb322182cfb",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "e5e10a03c765f635",
        "name": "",
        "property": "payload.userid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "user_id",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3786.6666870117188,
        "y": 1872.6666259765625,
        "wires": [
            [
                "36f3aaac45cb4a75"
            ]
        ]
    },
    {
        "id": "36f3aaac45cb4a75",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "e5e10a03c765f635",
        "name": "",
        "property": "payload.topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "DeleteSensor",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3906.6666870117188,
        "y": 1872.6666259765625,
        "wires": [
            [
                "14fd992d22a929cd"
            ]
        ]
    },
    {
        "id": "7a67d3528e55f960",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "80a73ffb26033b8b",
        "name": "debug 515",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3986.6666870117188,
        "y": 1572.6666259765625,
        "wires": []
    },
    {
        "id": "14fd992d22a929cd",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "e5e10a03c765f635",
        "name": "debug 516",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4046.6666870117188,
        "y": 1832.6666259765625,
        "wires": []
    },
    {
        "id": "3e0186213663d669",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "84a25a1825310cdc",
        "name": "Send connection command",
        "func": "\nvar ssid = \"SSS\";\nmsg.payload = `netsh wlan connect name=\"${ssid}\"`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1576.6666870117188,
        "y": 1392.6666259765625,
        "wires": [
            [
                "29f09ac9fa9eef4c"
            ]
        ]
    },
    {
        "id": "29f09ac9fa9eef4c",
        "type": "exec",
        "z": "34b9d5d8c870350c",
        "g": "84a25a1825310cdc",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Connect to WiFi (Windows)",
        "x": 1876.6666870117188,
        "y": 1392.6666259765625,
        "wires": [
            [
                "46645dbcc6f996ca"
            ],
            [],
            []
        ]
    },
    {
        "id": "6d5c917c6ca6f011",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "debug 517",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2026.6666870117188,
        "y": 1172.6666259765625,
        "wires": []
    },
    {
        "id": "46645dbcc6f996ca",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "Data conversion",
        "func": "msg.payload = {\n    state: \"pass\",\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2116.6666870117188,
        "y": 1372.6666259765625,
        "wires": [
            [
                "a67b264ee32bf7c9"
            ]
        ]
    },
    {
        "id": "c1a3c44afc3aa0a8",
        "type": "delay",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "",
        "pauseType": "delay",
        "timeout": "15",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2816.6666870117188,
        "y": 1412.6666259765625,
        "wires": [
            [
                "d439943da55b43cf",
                "f61ca98b87c03fb9"
            ]
        ]
    },
    {
        "id": "2e36a5554d6457c2",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "80a73ffb26033b8b",
        "name": "debug 519",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3466.6666870117188,
        "y": 1452.6666259765625,
        "wires": []
    },
    {
        "id": "cab3b61bfe625e8f",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "80a73ffb26033b8b",
        "name": "Data conversion",
        "func": "msg.payload = msg.payload.result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3196.6666870117188,
        "y": 1712.6666259765625,
        "wires": [
            [
                "0b53c379f1720525"
            ]
        ]
    },
    {
        "id": "396fcda5818b82b2",
        "type": "inject",
        "z": "34b9d5d8c870350c",
        "d": true,
        "g": "bf7ce7b601cd2fe5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2200,
        "y": 2840,
        "wires": [
            [
                "9feba09748830ee1"
            ]
        ]
    },
    {
        "id": "9feba09748830ee1",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "d": true,
        "g": "bf7ce7b601cd2fe5",
        "name": "function 208",
        "func": "msg.payload = {\n    \"name\": \"Worldmap\",\n    \"lat\": 48.515,\n    \"lon\": 2.1235\n};\n\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2370,
        "y": 2840,
        "wires": [
            [
                "ef5bb0b527341322"
            ]
        ]
    },
    {
        "id": "ef5bb0b527341322",
        "type": "worldmap",
        "z": "34b9d5d8c870350c",
        "d": true,
        "g": "bf7ce7b601cd2fe5",
        "name": "",
        "lat": "",
        "lon": "",
        "zoom": "",
        "layer": "EsriS",
        "cluster": "",
        "maxage": "",
        "usermenu": "show",
        "layers": "show",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "false",
        "coords": "none",
        "showgrid": "false",
        "allowFileDrop": "false",
        "path": "/mapui",
        "overlist": "DR,CO,RA,DN,HM",
        "maplist": "OSMG,OSMC,EsriC,EsriS,EsriT,EsriO,EsriDG,NatGeo,UKOS,OpTop",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 2530,
        "y": 2840,
        "wires": []
    },
    {
        "id": "b118cf9b41fcf4b0",
        "type": "ui_worldmap",
        "z": "34b9d5d8c870350c",
        "d": true,
        "g": "bf7ce7b601cd2fe5",
        "group": "861f644b7c69cbbe",
        "order": 2,
        "width": "14",
        "height": "14",
        "name": "Worldmap ",
        "lat": "",
        "lon": "",
        "zoom": "",
        "layer": "EsriS",
        "cluster": "",
        "maxage": "",
        "usermenu": "show",
        "layers": "show",
        "panit": "true",
        "panlock": "false",
        "zoomlock": "true",
        "hiderightclick": "false",
        "coords": "deg",
        "showgrid": "false",
        "allowFileDrop": "false",
        "path": "/mapui",
        "overlist": "DR,CO,RA,DN,HM",
        "maplist": "OSMG,OSMC,EsriC,EsriS,EsriT,EsriO,EsriDG,NatGeo,UKOS,OpTop",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 2510,
        "y": 2780,
        "wires": []
    },
    {
        "id": "5babb0aadbeb9802",
        "type": "worldmap in",
        "z": "34b9d5d8c870350c",
        "g": "bf7ce7b601cd2fe5",
        "name": "",
        "path": "/mapui",
        "events": "connect,disconnect,point,layer,bounds,files,draw,other",
        "x": 2150,
        "y": 2960,
        "wires": [
            [
                "e356758130d6efd0",
                "c62f2d5b4fea6c08"
            ]
        ]
    },
    {
        "id": "e356758130d6efd0",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "bf7ce7b601cd2fe5",
        "name": "debug 520",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2350,
        "y": 2900,
        "wires": []
    },
    {
        "id": "c62f2d5b4fea6c08",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "bf7ce7b601cd2fe5",
        "name": "",
        "property": "payload.action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "point",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2330,
        "y": 2960,
        "wires": [
            [
                "8bd5ee005aeecbed"
            ],
            [
                "78d85a87593e159e"
            ]
        ]
    },
    {
        "id": "8bd5ee005aeecbed",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "bf7ce7b601cd2fe5",
        "name": "Send request insert Map Point",
        "func": "var userId = flow.get('user_id'); // Get the flow variable 'user_id'\nvar currentProjectName = msg.payload.project;\nvar name = msg.payload.name;\nvar lat = msg.payload.lat;\nvar lon = msg.payload.lon;\nvar gps = `(${lat},${lon})`;\n\n\n\n// Construct the SQL INSERT statement using parameterized queries for safety\nvar sqlQuery = `\n    INSERT INTO SENSORRECORD (\n        SENSORNAME,\n        SENSORGPS,\n        USERID\n    ) VALUES (\n        '${name}', \n        '${gps}',\n        '${userId}'\n    );\n`;\nmsg.payload = {\n    userid: userId,\n    topic: \"InsertMapPoint\",\n    query: sqlQuery\n};\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2770,
        "y": 2960,
        "wires": [
            [
                "5eb0bb68e968e64a"
            ]
        ]
    },
    {
        "id": "5eb0bb68e968e64a",
        "type": "mqtt out",
        "z": "34b9d5d8c870350c",
        "g": "bf7ce7b601cd2fe5",
        "name": "",
        "topic": "server",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5304262e2bba2ec6",
        "x": 2970,
        "y": 2960,
        "wires": []
    },
    {
        "id": "6b93a08383379b4c",
        "type": "mqtt in",
        "z": "34b9d5d8c870350c",
        "g": "bf7ce7b601cd2fe5",
        "name": "",
        "topic": "response",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5304262e2bba2ec6",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3120,
        "y": 2960,
        "wires": [
            [
                "41a04c90987ac304"
            ]
        ]
    },
    {
        "id": "41a04c90987ac304",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "bf7ce7b601cd2fe5",
        "name": "",
        "property": "payload.userid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "user_id",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3270,
        "y": 2960,
        "wires": [
            [
                "95a81b4293434fdd"
            ]
        ]
    },
    {
        "id": "95a81b4293434fdd",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "bf7ce7b601cd2fe5",
        "name": "",
        "property": "payload.topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "InsertMapPoint",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3410,
        "y": 2960,
        "wires": [
            [
                "ccf932ef802ba1c2"
            ]
        ]
    },
    {
        "id": "78d85a87593e159e",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "bf7ce7b601cd2fe5",
        "name": "Send request to delete Map Point",
        "func": "\nvar userId = flow.get('user_id'); // Get the flow variable 'user_id'\nvar sensorName = msg.payload.name;\n\n// Construct the SQL DELETE statement\nvar sqlQuery = `\nDELETE FROM SENSORRECORD\nWHERE sensorname = '${sensorName}';\n`;\n\nmsg.payload = {\n    userid: userId,\n    topic: \"DeleteMapPoint\",\n    query: sqlQuery\n};\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2760,
        "y": 3040,
        "wires": [
            [
                "114b81a9cf47b271"
            ]
        ]
    },
    {
        "id": "114b81a9cf47b271",
        "type": "mqtt out",
        "z": "34b9d5d8c870350c",
        "g": "bf7ce7b601cd2fe5",
        "name": "",
        "topic": "server",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5304262e2bba2ec6",
        "x": 2990,
        "y": 3040,
        "wires": []
    },
    {
        "id": "469d4ce6a3474906",
        "type": "mqtt in",
        "z": "34b9d5d8c870350c",
        "g": "bf7ce7b601cd2fe5",
        "name": "",
        "topic": "response",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5304262e2bba2ec6",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3140,
        "y": 3040,
        "wires": [
            [
                "9026fecd993243e9"
            ]
        ]
    },
    {
        "id": "9026fecd993243e9",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "bf7ce7b601cd2fe5",
        "name": "",
        "property": "payload.userid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "user_id",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3270,
        "y": 3040,
        "wires": [
            [
                "c43d32e0ad1daa80"
            ]
        ]
    },
    {
        "id": "c43d32e0ad1daa80",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "bf7ce7b601cd2fe5",
        "name": "",
        "property": "payload.topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "DeleteMapPoint",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3390,
        "y": 3040,
        "wires": [
            [
                "d90f7f67ae03f60a",
                "ccf932ef802ba1c2"
            ]
        ]
    },
    {
        "id": "d90f7f67ae03f60a",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "bf7ce7b601cd2fe5",
        "name": "debug 521",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3530,
        "y": 3000,
        "wires": []
    },
    {
        "id": "process_coordinates",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "bf7ce7b601cd2fe5",
        "name": "Generate Coordinates",
        "func": "// Retrieve the incoming message payload\nlet payload = msg.payload;\n\n// Initialize an empty array for the map markers\nlet mapMarkers = [];\n\n// Loop through the results array\npayload.result.forEach(item => {\n    // Check if the sensorgps property exists and is in the correct format\n    if (item.sensorgps) {\n        // Extract the latitude and longitude from the sensorgps string\n        let coords = item.sensorgps.match(/-?\\d+(\\.\\d+)?/g);\n        if (coords && coords.length === 2) {\n            let lat = parseFloat(coords[0]);\n            let lon = parseFloat(coords[1]);\n            // Create a marker object with lat, lon, and name\n            let marker = {\n                lat: lat,\n                lon: lon,\n                name: item.sensorname || 'Unknown'\n            };\n            // Add the marker to the array\n            mapMarkers.push(marker);\n        }\n    }\n});\n\n// Set the formatted markers array as the payload of the outgoing message\nmsg.payload = mapMarkers;\n\n// Return the message\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2820,
        "y": 3200,
        "wires": [
            [
                "worldmap_out",
                "465637e1a2125480",
                "918a68f3177ada27"
            ]
        ]
    },
    {
        "id": "worldmap_out",
        "type": "ui_worldmap",
        "z": "34b9d5d8c870350c",
        "d": true,
        "g": "bf7ce7b601cd2fe5",
        "group": "861f644b7c69cbbe",
        "order": 2,
        "width": "13",
        "height": "6",
        "name": "World Map",
        "lat": "41.48894741759785",
        "lon": "2.2849658762010527",
        "zoom": "17",
        "layer": "EsriS",
        "cluster": "",
        "maxage": "",
        "usermenu": "show",
        "layers": "show",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "false",
        "coords": "none",
        "showgrid": "false",
        "allowFileDrop": "false",
        "path": "/mapui",
        "overlist": "DR,CO,RA,DN,HM",
        "maplist": "OSMG,OSMC,EsriC,EsriS,EsriT,EsriO,EsriDG,NatGeo,UKOS,OpTop",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 2890,
        "y": 3280,
        "wires": []
    },
    {
        "id": "ccf932ef802ba1c2",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "bf7ce7b601cd2fe5",
        "name": "Send request find Map Points",
        "func": "\nvar userId = flow.get('user_id'); // Get the flow variable\nvar sqlQuery = `SELECT SENSORNAME, SENSORGPS FROM SENSORRECORD WHERE USERID = ${userId};`; // Construct the SQL query\n\n\nmsg.payload = {\n    userid: userId,\n    topic: \"SelectMapPointsOfUser\",\n    query: sqlQuery\n};\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2750,
        "y": 3120,
        "wires": [
            [
                "060cec4e518c97fa"
            ]
        ]
    },
    {
        "id": "060cec4e518c97fa",
        "type": "mqtt out",
        "z": "34b9d5d8c870350c",
        "g": "bf7ce7b601cd2fe5",
        "name": "",
        "topic": "server",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5304262e2bba2ec6",
        "x": 2970,
        "y": 3120,
        "wires": []
    },
    {
        "id": "51205da211542063",
        "type": "mqtt in",
        "z": "34b9d5d8c870350c",
        "g": "bf7ce7b601cd2fe5",
        "name": "",
        "topic": "response",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5304262e2bba2ec6",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3120,
        "y": 3120,
        "wires": [
            [
                "b3f9b22aae8085f4"
            ]
        ]
    },
    {
        "id": "b3f9b22aae8085f4",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "bf7ce7b601cd2fe5",
        "name": "",
        "property": "payload.userid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "user_id",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3250,
        "y": 3120,
        "wires": [
            [
                "cae64644983b819f"
            ]
        ]
    },
    {
        "id": "cae64644983b819f",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "bf7ce7b601cd2fe5",
        "name": "",
        "property": "payload.topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SelectMapPointsOfUser",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3390,
        "y": 3120,
        "wires": [
            [
                "process_coordinates",
                "7ce08ce419fb4342"
            ]
        ]
    },
    {
        "id": "292596d65b0e1a93",
        "type": "ui_button",
        "z": "34b9d5d8c870350c",
        "g": "bf7ce7b601cd2fe5",
        "name": "",
        "group": "8f0a6d83b373cd31",
        "order": 4,
        "width": "5",
        "height": "1",
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "home",
        "payload": "{\"group\":{\"hide\":[\"Main_Add_devices\",\"Main_DevicesConnected\",\"Main_System\",\"Main_Settings\",\"Main_Statistics\",\"Main_Logs\",\"Main_ConnectionPage\",\"Main_Add_Project\",\"Main_Projects\",\"Main_Projects_Sensors\",\"Main_ChooseMapPoint\",\"Main_LogInPage\",\"Main_RegisterPage\"],\"show\":[\"Main_Map\",\"Main_Buttons\"]}}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 2150,
        "y": 3120,
        "wires": [
            [
                "7e326515acc6175a",
                "ccf932ef802ba1c2"
            ]
        ]
    },
    {
        "id": "7e326515acc6175a",
        "type": "ui_ui_control",
        "z": "34b9d5d8c870350c",
        "g": "bf7ce7b601cd2fe5",
        "name": "",
        "events": "all",
        "x": 2300,
        "y": 3160,
        "wires": [
            []
        ]
    },
    {
        "id": "7ce08ce419fb4342",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "bf7ce7b601cd2fe5",
        "name": "debug 522",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3530,
        "y": 3100,
        "wires": []
    },
    {
        "id": "465637e1a2125480",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "bf7ce7b601cd2fe5",
        "name": "debug 523",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3070,
        "y": 3260,
        "wires": []
    },
    {
        "id": "918a68f3177ada27",
        "type": "ui_worldmap",
        "z": "34b9d5d8c870350c",
        "g": "bf7ce7b601cd2fe5",
        "group": "861f644b7c69cbbe",
        "order": 2,
        "width": "14",
        "height": "14",
        "name": "Worldmap ",
        "lat": "",
        "lon": "",
        "zoom": "",
        "layer": "EsriS",
        "cluster": "",
        "maxage": "",
        "usermenu": "show",
        "layers": "show",
        "panit": "true",
        "panlock": "false",
        "zoomlock": "true",
        "hiderightclick": "false",
        "coords": "deg",
        "showgrid": "false",
        "allowFileDrop": "false",
        "path": "/mapui",
        "overlist": "DR,CO,RA,DN,HM",
        "maplist": "OSMG,OSMC,EsriC,EsriS,EsriT,EsriO,EsriDG,NatGeo,UKOS,OpTop",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 3070,
        "y": 3200,
        "wires": []
    },
    {
        "id": "3735f1987bea386c",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "Send request to select user Map Points",
        "func": "\nvar userId = flow.get('user_id'); // Get the flow variable 'user_id'\n\n\n// Construct the SQL INSERT statement using parameterized queries for safety\nvar sqlQuery = `SELECT * FROM SENSORRECORD WHERE USERID = '${userId}';`; // Construct the SQL query\n\nmsg.payload = {\n    userid: userId,\n    topic: \"SelectUserMapPoints\",\n    query: sqlQuery\n};\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2076.6666870117188,
        "y": 1072.6666259765625,
        "wires": [
            [
                "b3e72ab653a621e7"
            ]
        ]
    },
    {
        "id": "b3e72ab653a621e7",
        "type": "mqtt out",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "",
        "topic": "server",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5304262e2bba2ec6",
        "x": 2326.6666870117188,
        "y": 1072.6666259765625,
        "wires": []
    },
    {
        "id": "db5c54afd7586fd4",
        "type": "mqtt in",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "",
        "topic": "response",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5304262e2bba2ec6",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 2476.6666870117188,
        "y": 1072.6666259765625,
        "wires": [
            [
                "e3dc197785c2d519"
            ]
        ]
    },
    {
        "id": "e3dc197785c2d519",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "",
        "property": "payload.userid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "user_id",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2606.6666870117188,
        "y": 1072.6666259765625,
        "wires": [
            [
                "773696d6ed02775d"
            ]
        ]
    },
    {
        "id": "773696d6ed02775d",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "",
        "property": "payload.topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SelectUserMapPoints",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2726.6666870117188,
        "y": 1072.6666259765625,
        "wires": [
            [
                "83f295d2bcb8baf5",
                "313adc9847167be7"
            ]
        ]
    },
    {
        "id": "afc638a05dd1c23a",
        "type": "ui_dropdown",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "Sensor Dropdown",
        "label": "Select a sensor",
        "tooltip": "",
        "place": "Select sensor",
        "group": "21dd1e78a0d8a51b",
        "order": 0,
        "width": "4",
        "height": "8",
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "selectedSensor",
        "topicType": "str",
        "className": "",
        "x": 3846.6666870117188,
        "y": 1072.6666259765625,
        "wires": [
            [
                "a2bdcba7ad5e21e5",
                "2d82eb77145036ce",
                "d190d6e043664925"
            ]
        ]
    },
    {
        "id": "a2bdcba7ad5e21e5",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3986.6666870117188,
        "y": 1032.6666259765625,
        "wires": []
    },
    {
        "id": "aad821d5b5b49089",
        "type": "change",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"Main_System\",\"Main_Settings\",\"Main_Statistics\",\"Main_Logs\",\"Main_Map\",\"Main_Add_Project\",\"Main_ConnectionPage\",\"Main_Projects\",\"Main_Projects_Sensors\",\"Main_Add_devices\",\"Main_LogInPage\",\"Main_RegisterPage\"],\"show\":[\"Main_ChooseMapPoint\",\"Main_DevicesConnected\",\"Main_Buttons\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2536.6666870117188,
        "y": 1212.6666259765625,
        "wires": [
            [
                "82b975a668aa6c0a",
                "eabbc15c9e30554f"
            ]
        ]
    },
    {
        "id": "82b975a668aa6c0a",
        "type": "ui_ui_control",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "",
        "events": "all",
        "x": 2716.6666870117188,
        "y": 1172.6666259765625,
        "wires": [
            []
        ]
    },
    {
        "id": "37c354812f025389",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "name": "debug 525",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3860.833251953125,
        "y": 985.8333129882812,
        "wires": []
    },
    {
        "id": "83f295d2bcb8baf5",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "debug 526",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2946.6666870117188,
        "y": 1012.6666259765625,
        "wires": []
    },
    {
        "id": "cb3c68a942f8ea7a",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "debug 528",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3246.6666870117188,
        "y": 1012.6666259765625,
        "wires": []
    },
    {
        "id": "00c2ad103e9a52cd",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "debug 529",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3446.6666870117188,
        "y": 1012.6666259765625,
        "wires": []
    },
    {
        "id": "313adc9847167be7",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "Create map_points variable",
        "func": "var map_points = msg.payload.result;\nflow.set(\"map_points\", map_points);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2976.6666870117188,
        "y": 1072.6666259765625,
        "wires": [
            []
        ]
    },
    {
        "id": "eabbc15c9e30554f",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "Prepare Dropdown Options",
        "func": "var map_points = flow.get(\"map_points\");\n\n// Ensure map_points is available and is an array\nif (Array.isArray(map_points)) {\n    // Extract sensornames from map_points\n    msg.options = map_points.map(point => point.sensorname);\n\n    // Set the payload to the first option (if available)\n    msg.payload = msg.options.length > 0 ? msg.options[0] : '';\n\n    // Optionally, keep the original map_points for reference\n    msg.originalMapPoints = map_points;\n} else {\n    // Handle the case where map_points is not available or not an array\n    msg.options = [\"Error: Invalid map_points data\"];\n    msg.payload = \"Error: Invalid map_points data\";\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3596.6666870117188,
        "y": 1072.6666259765625,
        "wires": [
            [
                "afc638a05dd1c23a",
                "37c354812f025389"
            ]
        ]
    },
    {
        "id": "2d82eb77145036ce",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "Get Map Point info",
        "func": "// Get the map_points data from the flow variable\nvar map_points = flow.get(\"map_points\");\n\n// Get the selected sensor name from the incoming message\nvar selectedSensor = msg.payload;\n\n// Find the matching sensor data\nvar sensorData = null;\nif (Array.isArray(map_points)) {\n    sensorData = map_points.find(point => point.sensorname === selectedSensor);\n}\n\n// Prepare the output message\nif (sensorData) {\n    msg.payload = sensorData;\n    msg.found = true;\n} else {\n    msg.payload = { error: \"Sensor data not found\" };\n    msg.found = false;\n}\n\n// Preserve the original topic and socketid\nmsg.topic = msg.topic || \"sensorData\";\nmsg.socketid = msg.socketid;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4086.6666870117188,
        "y": 1072.6666259765625,
        "wires": [
            [
                "0963749f50b7024f",
                "ecac976082bdc147"
            ]
        ]
    },
    {
        "id": "ecac976082bdc147",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "debug 531",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4470,
        "y": 1020,
        "wires": []
    },
    {
        "id": "d190d6e043664925",
        "type": "change",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"Main_System\",\"Main_Settings\",\"Main_Statistics\",\"Main_Logs\",\"Main_Map\",\"Main_Add_Project\",\"Main_ConnectionPage\",\"Main_Projects\",\"Main_Projects_Sensors\",\"Main_ChooseMapPoint\",\"Main_LogInPage\",\"Main_RegisterPage\"],\"show\":[\"Main_Add_devices\",\"Main_DevicesConnected\",\"Main_Buttons\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 4056.6666870117188,
        "y": 1192.6666259765625,
        "wires": [
            [
                "d50bdc6693603a26"
            ]
        ]
    },
    {
        "id": "d50bdc6693603a26",
        "type": "ui_ui_control",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "",
        "events": "all",
        "x": 4256.666687011719,
        "y": 1192.6666259765625,
        "wires": [
            []
        ]
    },
    {
        "id": "fbbbde6056f8527d",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "bb92db5410d82dab",
        "name": "debug 532",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 5210,
        "y": 3940,
        "wires": []
    },
    {
        "id": "2cf0eee11313012f",
        "type": "ui_ui_control",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "",
        "events": "all",
        "x": 240,
        "y": 5000,
        "wires": [
            [
                "feea32dd9ca80747"
            ]
        ]
    },
    {
        "id": "f531ca6f46d9edd0",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "debug 533",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 4900,
        "wires": []
    },
    {
        "id": "feea32dd9ca80747",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connect",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 370,
        "y": 5000,
        "wires": [
            [
                "f531ca6f46d9edd0",
                "a5cdd78e05aace41",
                "b0627760db48bd2f",
                "bdccf410ad319795"
            ]
        ]
    },
    {
        "id": "a5cdd78e05aace41",
        "type": "ui_form",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "",
        "label": "",
        "group": "88f77589.0122d8",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "password",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "username": "",
            "password": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 670,
        "y": 5000,
        "wires": [
            [
                "e725884c5886e182",
                "e9607cfdd2aaf9c3",
                "4bb51ed6a6202af4"
            ]
        ]
    },
    {
        "id": "84728b8add0a9f02",
        "type": "ui_ui_control",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "",
        "events": "all",
        "x": 2660,
        "y": 5100,
        "wires": [
            []
        ]
    },
    {
        "id": "062d63e9bc9d9b40",
        "type": "change",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"Main_Add_devices\",\"Main_DevicesConnected\",\"Main_System\",\"Main_Settings\",\"Main_Statistics\",\"Main_Logs\",\"Main_ConnectionPage\",\"Main_Add_Project\",\"Main_Projects\",\"Main_Projects_Sensors\",\"Main_ChooseMapPoint\",\"Main_LogInPage\",\"Main_RegisterPage\"],\"show\":[\"Main_Map\",\"Main_Buttons\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2460,
        "y": 5100,
        "wires": [
            [
                "84728b8add0a9f02"
            ]
        ]
    },
    {
        "id": "4bb51ed6a6202af4",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "debug 534",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 4900,
        "wires": []
    },
    {
        "id": "78413c3860d31e49",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "",
        "property": "payload.userid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "None",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2030,
        "y": 5000,
        "wires": [
            [
                "6413950a8bc9db25"
            ],
            [
                "218897142cd0994a"
            ]
        ]
    },
    {
        "id": "6413950a8bc9db25",
        "type": "change",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "User not found",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "No user found",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2260,
        "y": 5000,
        "wires": [
            [
                "beded6a7f6076acc"
            ]
        ]
    },
    {
        "id": "218897142cd0994a",
        "type": "change",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "User found",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Welcome !",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2250,
        "y": 5040,
        "wires": [
            [
                "ac05c101776077ec",
                "062d63e9bc9d9b40"
            ]
        ]
    },
    {
        "id": "ac05c101776077ec",
        "type": "ui_toast",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 2510,
        "y": 5040,
        "wires": []
    },
    {
        "id": "beded6a7f6076acc",
        "type": "ui_toast",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 2510,
        "y": 5000,
        "wires": []
    },
    {
        "id": "e9607cfdd2aaf9c3",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "user_id finder",
        "func": "\nvar username = msg.payload.username;\nvar password = msg.payload.password;\n\nvar sqlQuery = `SELECT * FROM USERS WHERE USERNAME = '${username}' AND PASSWORD = '${password}';`; // Construct the SQL query\n\n\nmsg.payload = {\n    username: username,\n    //topic: \"SelectUserSettings\",\n    query: sqlQuery\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 5000,
        "wires": [
            [
                "98e65a7b726a4205",
                "4bf652ddaa48c373"
            ]
        ]
    },
    {
        "id": "908af373545f66bc",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "debug 535",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1850,
        "y": 4940,
        "wires": []
    },
    {
        "id": "98e65a7b726a4205",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "debug 536",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 4940,
        "wires": []
    },
    {
        "id": "4bf652ddaa48c373",
        "type": "mqtt out",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "",
        "topic": "server/userIdentification",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5304262e2bba2ec6",
        "x": 1350,
        "y": 5000,
        "wires": []
    },
    {
        "id": "64b5b9f1bf771007",
        "type": "mqtt in",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "",
        "topic": "client/userIdentification",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5304262e2bba2ec6",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1620,
        "y": 5000,
        "wires": [
            [
                "908af373545f66bc",
                "21a050ded1e1db1c"
            ]
        ]
    },
    {
        "id": "e725884c5886e182",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "Define user_name flow variable",
        "func": "var userName = msg.payload.username;\n\nflow.set('user_name', userName); // Set the flow variable 'user_id'\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 4900,
        "wires": [
            [
                "15ebf48c1780b916"
            ]
        ]
    },
    {
        "id": "15ebf48c1780b916",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "debug 537",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 4900,
        "wires": []
    },
    {
        "id": "21a050ded1e1db1c",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "",
        "property": "payload.username",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "user_name",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1850,
        "y": 5000,
        "wires": [
            [
                "78413c3860d31e49",
                "d235a7857b0e32aa",
                "9e57d9205c7b2d83",
                "fcbde42a3cc304f5",
                "5c6dda9ebf85960c",
                "2be112a7d9138740"
            ]
        ]
    },
    {
        "id": "d235a7857b0e32aa",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "debug 538",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2190,
        "y": 4940,
        "wires": []
    },
    {
        "id": "69d05671296599c6",
        "type": "ui_ui_control",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "",
        "events": "all",
        "x": 720,
        "y": 5120,
        "wires": [
            []
        ]
    },
    {
        "id": "b0627760db48bd2f",
        "type": "change",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"Main_Add_devices\",\"Main_DevicesConnected\",\"Main_System\",\"Main_Settings\",\"Main_Statistics\",\"Main_Logs\",\"Main_ConnectionPage\",\"Main_Add_Project\",\"Main_Projects\",\"Main_Projects_Sensors\",\"Main_ChooseMapPoint\",\"Main_Map\",\"Main_Buttons\",\"Main_RegisterPage\"],\"show\":[\"Main_LogInPage\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 5200,
        "wires": [
            [
                "04c0821af2c3b594"
            ]
        ]
    },
    {
        "id": "04c0821af2c3b594",
        "type": "ui_ui_control",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "",
        "events": "all",
        "x": 500,
        "y": 5200,
        "wires": [
            []
        ]
    },
    {
        "id": "95d3620cee5d5917",
        "type": "ui_form",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "",
        "label": "",
        "group": "2de9a0a4d2bbf71c",
        "order": 8,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "password",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Wifi SSID",
                "value": "ssid",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Wifi password",
                "value": "wifi_password",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Home GPS Coordinates",
                "value": "home_gps",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "username": "",
            "password": "",
            "ssid": "",
            "wifi_password": "",
            "home_gps": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 850,
        "y": 5200,
        "wires": [
            [
                "c6421c99cdc4c2fc"
            ]
        ]
    },
    {
        "id": "38e673170a81baab",
        "type": "ui_button",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "",
        "group": "2de9a0a4d2bbf71c",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Back",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "return",
        "payload": "{\"group\":{\"hide\":[\"Main_Add_devices\",\"Main_DevicesConnected\",\"Main_System\",\"Main_Settings\",\"Main_Statistics\",\"Main_Logs\",\"Main_ConnectionPage\",\"Main_Add_Project\",\"Main_Projects\",\"Main_Projects_Sensors\",\"Main_ChooseMapPoint\",\"Main_Map\",\"Main_Buttons\",\"Main_RegisterPage\"],\"show\":[\"Main_LogInPage\"]}}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 850,
        "y": 5240,
        "wires": [
            [
                "53821a38e936e051"
            ]
        ]
    },
    {
        "id": "c6421c99cdc4c2fc",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "Send request add new User",
        "func": "var userId = Date.now();\nvar userName = msg.payload.username;\nvar password = msg.payload.password;\nvar ssid = msg.payload.ssid;\nvar wifiPassword = msg.payload.wifi_password;\nvar homeGps = msg.payload.home_gps;\n\n\nvar sqlQuery = `INSERT INTO USERS (\n    USERID,\n    USERNAME,\n    PASSWORD,  \n    SSID,     \n    WIFIPASSWORD,   \n    HOMEGPS\n    )\n    VALUES (\n        '${userId}',\n        '${userName}',\n        '${password}',\n        '${ssid}',\n        '${wifiPassword}',\n        '${homeGps}'\n    );`;\n\nmsg.payload = {\n    userid: userId,\n    topic: \"CreateNewUser\",\n    query: sqlQuery\n};\n\nflow.set('user_id', userId); // Set the flow variable 'user_id'\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 5200,
        "wires": [
            [
                "2960cd0ea46425fb"
            ]
        ]
    },
    {
        "id": "2960cd0ea46425fb",
        "type": "mqtt out",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "",
        "topic": "server",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5304262e2bba2ec6",
        "x": 1330,
        "y": 5200,
        "wires": []
    },
    {
        "id": "9a058db7c58870f4",
        "type": "mqtt in",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "",
        "topic": "response",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5304262e2bba2ec6",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1480,
        "y": 5200,
        "wires": [
            [
                "81c5efa4cee25996"
            ]
        ]
    },
    {
        "id": "81c5efa4cee25996",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "",
        "property": "payload.userid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "user_id",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1630,
        "y": 5200,
        "wires": [
            [
                "81ac3116672e320b"
            ]
        ]
    },
    {
        "id": "81ac3116672e320b",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "",
        "property": "payload.topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CreateNewUser",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1770,
        "y": 5200,
        "wires": [
            [
                "b81e680e0fdce029",
                "902e65aea0fe5d7f"
            ]
        ]
    },
    {
        "id": "b81e680e0fdce029",
        "type": "change",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"Main_Add_devices\",\"Main_DevicesConnected\",\"Main_System\",\"Main_Settings\",\"Main_Statistics\",\"Main_Logs\",\"Main_ConnectionPage\",\"Main_Add_Project\",\"Main_Projects\",\"Main_Projects_Sensors\",\"Main_ChooseMapPoint\",\"Main_Map\",\"Main_Buttons\",\"Main_RegisterPage\"],\"show\":[\"Main_LogInPage\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1960,
        "y": 5200,
        "wires": [
            [
                "09a7bc7942ba6b09"
            ]
        ]
    },
    {
        "id": "09a7bc7942ba6b09",
        "type": "ui_ui_control",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "",
        "events": "all",
        "x": 2140,
        "y": 5200,
        "wires": [
            []
        ]
    },
    {
        "id": "bdccf410ad319795",
        "type": "ui_button",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "",
        "group": "88f77589.0122d8",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Register",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "register",
        "payload": "{\"group\":{\"hide\":[\"Main_Add_devices\",\"Main_DevicesConnected\",\"Main_System\",\"Main_Settings\",\"Main_Statistics\",\"Main_Logs\",\"Main_ConnectionPage\",\"Main_Add_Project\",\"Main_Projects\",\"Main_Projects_Sensors\",\"Main_ChooseMapPoint\",\"Main_Map\",\"Main_Buttons\",\"Main_LogInPage\"],\"show\":[\"Main_RegisterPage\"]}}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 540,
        "y": 5120,
        "wires": [
            [
                "69d05671296599c6",
                "38e673170a81baab",
                "95d3620cee5d5917"
            ]
        ]
    },
    {
        "id": "53821a38e936e051",
        "type": "change",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"Main_Add_devices\",\"Main_DevicesConnected\",\"Main_System\",\"Main_Settings\",\"Main_Statistics\",\"Main_Logs\",\"Main_ConnectionPage\",\"Main_Add_Project\",\"Main_Projects\",\"Main_Projects_Sensors\",\"Main_ChooseMapPoint\",\"Main_Map\",\"Main_Buttons\",\"Main_RegisterPage\"],\"show\":[\"Main_LogInPage\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 5240,
        "wires": [
            [
                "a7b4e34b8f68cebf"
            ]
        ]
    },
    {
        "id": "a7b4e34b8f68cebf",
        "type": "ui_ui_control",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "",
        "events": "all",
        "x": 1220,
        "y": 5240,
        "wires": [
            []
        ]
    },
    {
        "id": "9633a34e78ff5646",
        "type": "ui_toast",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 2150,
        "y": 5160,
        "wires": []
    },
    {
        "id": "902e65aea0fe5d7f",
        "type": "change",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "User created",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Welcome !",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1950,
        "y": 5160,
        "wires": [
            [
                "9633a34e78ff5646"
            ]
        ]
    },
    {
        "id": "fcbde42a3cc304f5",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "Set flow variables",
        "func": "var userId = msg.payload.userid;\nvar ssid = msg.payload.ssid;\nvar wifi_password = msg.payload.wifipassword;\n\n\nflow.set('user_id', userId); // Set the flow variable 'user_id'\nflow.set('ssid', ssid); // Set the flow variable 'ssid'\nflow.set('wifi_password', wifi_password); // Set the flow variable 'wifi_password'\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 5100,
        "wires": [
            []
        ]
    },
    {
        "id": "9e57d9205c7b2d83",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "d": true,
        "g": "2c9021644b66ef7d",
        "name": "Define user_id flow variable",
        "func": "var userId = msg.payload.userid;\n\nflow.set('user_id', userId); // Set the flow variable 'user_id'\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1960,
        "y": 5060,
        "wires": [
            []
        ]
    },
    {
        "id": "5c6dda9ebf85960c",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "2c9021644b66ef7d",
        "name": "debug 539",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1610,
        "y": 5100,
        "wires": []
    },
    {
        "id": "a2821ce2027afb82",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "a51f83288c379d44",
        "name": "Ip not null",
        "property": "payload.ip",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3576.6666870117188,
        "y": 2152.6666259765625,
        "wires": [
            [
                "4e8ee0d497a57534",
                "2184ecd8e1eae065"
            ]
        ]
    },
    {
        "id": "0af1cda109d80e46",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "a51f83288c379d44",
        "name": "Ip null",
        "property": "payload.ip",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3566.6666870117188,
        "y": 2112.6666259765625,
        "wires": [
            [
                "1add0367c933ba5d"
            ]
        ]
    },
    {
        "id": "4e8ee0d497a57534",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "a51f83288c379d44",
        "name": "MAC Results",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3766.6666870117188,
        "y": 2112.6666259765625,
        "wires": []
    },
    {
        "id": "1add0367c933ba5d",
        "type": "exec",
        "z": "34b9d5d8c870350c",
        "g": "a75e145b51c53c13",
        "command": "nmap -sn 169.254.47.0/24 | grep shelly && nmap -sn 169.254.47.1/24 | grep shelly",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "scan ",
        "x": 2706.6666870117188,
        "y": 2092.6666259765625,
        "wires": [
            [
                "118d416ad1c23644",
                "37c78c699a45c373"
            ],
            [],
            []
        ]
    },
    {
        "id": "6efc0a27e4f975fb",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "a75e145b51c53c13",
        "name": "debug 540",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3176.6666870117188,
        "y": 2072.6666259765625,
        "wires": []
    },
    {
        "id": "118d416ad1c23644",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "a75e145b51c53c13",
        "name": "Subnet Devices Array",
        "func": "var nmapOutput = msg.payload;\nconst stringsToCheck = nmapOutput.split('\\n')\n\nconst result = [];\nconst regex1 = 'Nmap scan report for (\\\\S+)-([a-fA-F0-9]+)\\\\.localdomain \\\\((\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+)\\\\)';\nconst regex2 = 'Nmap scan report for (\\\\S+)-([a-fA-F0-9]+) \\\\((\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+)\\\\)';\n\nconst regex3 = 'Nmap scan report for (\\\\S+)-([a-fA-F0-9]+)\\\\.IOT-Devices \\\\((\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+)\\\\)';\n// const regexWithName = /Nmap scan report for ([^\\s]+)\\.localdomain \\((\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})\\)/;\nconst regex4 = /Nmap scan report for (\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})/;\n\n\nfunction checkRegex(pattern, str, result) {\n  const regex = new RegExp(pattern);\n  const match = str.match(regex);\n\n  if (match) {\n    const device = match[1];\n    const MAC = match[2];\n    const IP = match[3];\n    result.push({ device, MAC, IP });\n\n  }\n}\n\n\nfor (const str of stringsToCheck) {\n  checkRegex(regex1, str, result);\n  checkRegex(regex2, str, result);\n  checkRegex(regex3, str, result);\n  checkRegex(regex4, str, result);\n}\n\nflow.set(\"devices_Shelly\", result)\nmsg.payload = result\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2956.6666870117188,
        "y": 2092.6666259765625,
        "wires": [
            [
                "6efc0a27e4f975fb",
                "6d881d1c484ece7d"
            ]
        ]
    },
    {
        "id": "6d881d1c484ece7d",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "a75e145b51c53c13",
        "name": "find ip with mac",
        "func": "//const targetMAC = msg.payload.mac; // Expecting the MAC address in the msg.payload.mac\n//const targetMAC = \"ec626091e484\"\nconst targetMAC = flow.get(\"sensor_id\");\n\nconst devices = flow.get(\"devices_Shelly\");\nlet targetIP = null;\n\nif (devices && Array.isArray(devices)) {\n    for (const device of devices) {\n        if (device.MAC && typeof device.MAC === 'string' && device.MAC.toLowerCase() === targetMAC.toLowerCase()) {\n        //if (device.MAC && device.MAC.toLowerCase() === targetMAC.toLowerCase()) {\n            targetIP = device.IP;\n            break;\n        }\n    }\n}\n\nmsg.payload = { mac: targetMAC, ip: targetIP };\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3336.6666870117188,
        "y": 2192.6666259765625,
        "wires": [
            [
                "0ed1514019640b1b",
                "a2821ce2027afb82",
                "0af1cda109d80e46"
            ]
        ]
    },
    {
        "id": "0ed1514019640b1b",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "a75e145b51c53c13",
        "name": "MAC Results",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3426.6666870117188,
        "y": 2052.6666259765625,
        "wires": []
    },
    {
        "id": "37c78c699a45c373",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "a75e145b51c53c13",
        "name": "debug 541",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2916.6666870117188,
        "y": 2052.6666259765625,
        "wires": []
    },
    {
        "id": "f61ca98b87c03fb9",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "function 243",
        "func": "var sensorId = msg.payload.sensorId\nflow.set(\"sensor_id\", sensorId);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2786.6666870117188,
        "y": 1532.6666259765625,
        "wires": [
            [
                "1add0367c933ba5d",
                "68a27b7ff0112041"
            ]
        ]
    },
    {
        "id": "68a27b7ff0112041",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "16d5787ce3c49dd5",
        "name": "debug 542",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2966.6666870117188,
        "y": 1492.6666259765625,
        "wires": []
    },
    {
        "id": "2184ecd8e1eae065",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "a51f83288c379d44",
        "name": "Send request to update Sensor",
        "func": "\nvar userId = flow.get('user_id'); // Get the flow variable 'user_id'\nvar sensorId = msg.payload.mac;\nvar ip = msg.payload.ip;\n\n// Construct the SQL DELETE statement\nvar sqlQuery = `\nUPDATE SENSORS\nSET sensorip = '${ip}'\nWHERE sensorid = '${sensorId}';\n`;\n\nmsg.payload = {\n    userid: userId,\n    topic: \"UpdateIp\",\n    query: sqlQuery\n};\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3826.6666870117188,
        "y": 2172.6666259765625,
        "wires": [
            [
                "bfb7858c2e09d405",
                "eb80392738ab3f9d"
            ]
        ]
    },
    {
        "id": "bfb7858c2e09d405",
        "type": "mqtt out",
        "z": "34b9d5d8c870350c",
        "g": "a51f83288c379d44",
        "name": "",
        "topic": "server",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5304262e2bba2ec6",
        "x": 4066.6666870117188,
        "y": 2172.6666259765625,
        "wires": []
    },
    {
        "id": "0879243caed209bb",
        "type": "mqtt in",
        "z": "34b9d5d8c870350c",
        "g": "a51f83288c379d44",
        "name": "",
        "topic": "response",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5304262e2bba2ec6",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 4216.666687011719,
        "y": 2172.6666259765625,
        "wires": [
            [
                "962d97808e590fac"
            ]
        ]
    },
    {
        "id": "962d97808e590fac",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "a51f83288c379d44",
        "name": "",
        "property": "payload.userid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "user_id",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 4346.666687011719,
        "y": 2172.6666259765625,
        "wires": [
            [
                "18d6bb10bb2e3df8"
            ]
        ]
    },
    {
        "id": "18d6bb10bb2e3df8",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "a51f83288c379d44",
        "name": "",
        "property": "payload.topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "UpdateIp",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 4466.666687011719,
        "y": 2172.6666259765625,
        "wires": [
            []
        ]
    },
    {
        "id": "eb80392738ab3f9d",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "a51f83288c379d44",
        "name": "Query",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4046.6666870117188,
        "y": 2112.6666259765625,
        "wires": []
    },
    {
        "id": "7d10627380a7bfbe",
        "type": "join",
        "z": "34b9d5d8c870350c",
        "g": "64fdefb75f957abe",
        "name": "Whole data (Sensors & Home)",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2210,
        "y": 6200,
        "wires": [
            [
                "89346e6aff0cfa74",
                "66ba91e1d82f9664"
            ]
        ]
    },
    {
        "id": "a0601eb97536fd55",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "7342e402e872298a",
        "name": "Process MQTT Message",
        "func": "var topic = msg.topic;\nvar sensorList = flow.get(\"sensorList\");\nvar matchFound = false;\nvar newMsg = null;\nvar payload = msg.payload\n\nfor (var i = 0; i < sensorList.length; i++) {\n    var sensorAccessPoint = \"shellies/\" + sensorList[i].sensortype + \"-\" + sensorList[i].sensorid + \"/info\";\n    if (topic.startsWith(sensorAccessPoint)) {\n        matchFound = true;\n        newMsg = {\n            \"payload\": sensorList[i].sensorid\n        }\n        break;\n    }\n}\n\nif (matchFound) {\n    // If a match is found, send the new message to both debug nodes\n    return newMsg;\n} else {\n    // If no match is found, do not send anything to the output\n    return null;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 6180,
        "wires": [
            [
                "d616d07adc54c790",
                "4b0c42c3dbd90084"
            ]
        ]
    },
    {
        "id": "a88acb4b8c400619",
        "type": "mqtt in",
        "z": "34b9d5d8c870350c",
        "g": "7342e402e872298a",
        "name": "",
        "topic": "shellies/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5304262e2bba2ec6",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 6180,
        "wires": [
            [
                "a0601eb97536fd55",
                "a563133ccbf2d8b4"
            ]
        ]
    },
    {
        "id": "89346e6aff0cfa74",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "64fdefb75f957abe",
        "name": "debug 543",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2280,
        "y": 6260,
        "wires": []
    },
    {
        "id": "0bc107d3267fbcb6",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "264d8e6587330dd6",
        "name": "ProjectIds",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2040,
        "y": 5960,
        "wires": []
    },
    {
        "id": "66ba91e1d82f9664",
        "type": "join",
        "z": "34b9d5d8c870350c",
        "g": "64fdefb75f957abe",
        "name": "",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2450,
        "y": 6200,
        "wires": [
            [
                "283bcbca1d26617e",
                "8a9f2aa60bb64229"
            ]
        ]
    },
    {
        "id": "283bcbca1d26617e",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "64fdefb75f957abe",
        "name": "MainCodeOutput",
        "func": "var topics = msg.payload.projectids;\nvar homeGps = msg.payload.homegps;\nvar sensorId = msg.payload.sensorid;\nvar sensorName = msg.payload.sensorname;\nvar sensorGps = msg.payload.sensorgps;\n\nmsg.topic = {\n    projectids: topics,\n};\n\nmsg.payload = {\n    homegps: homeGps,\n    sensorid: sensorId,\n    sensorname: sensorName,\n    sensorgps: sensorGps,\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2690,
        "y": 6200,
        "wires": [
            [
                "e649fc743bf4e29e"
            ]
        ]
    },
    {
        "id": "e3d3bc989375e8ba",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "d": true,
        "g": "c73a4cd414c20993",
        "name": "DetectIntrusion",
        "func": "// Initialize context variables if they don't exist\ncontext.set('sensors', context.get('sensors') || []);\ncontext.set('activationOrder', context.get('activationOrder') || 0);\ncontext.set('recentActivations', context.get('recentActivations') || []);\n\n// Constants\nconst activeWindow = 1; // Number of recent activations to consider\nconst approachThreshold = 0.6; // Threshold for determining an intrusion\n\nfunction parseGPS(gpsString) {\n    const [lat, lon] = gpsString.replace(/[()]/g, '').split(',').map(Number);\n    return { lat, lon };\n}\n\nfunction distance(point1, point2) {\n    const R = 6371e3; // Earth's radius in meters\n    const φ1 = point1.lat * Math.PI / 180;\n    const φ2 = point2.lat * Math.PI / 180;\n    const Δφ = (point2.lat - point1.lat) * Math.PI / 180;\n    const Δλ = (point2.lon - point1.lon) * Math.PI / 180;\n\n    const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\n        Math.cos(φ1) * Math.cos(φ2) *\n        Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n    return R * c;\n}\n\n// Process incoming sensor data\nconst homeGPS = parseGPS(msg.payload[1].HOMEGPS);\nconst sensorGPS = parseGPS(msg.payload[0].GPSCORD);\nconst sensorData = {\n    id: msg.payload[0].SENSORID,\n    name: msg.payload[0].SENSORNAME,\n    lat: sensorGPS.lat,\n    lon: sensorGPS.lon,\n    activatedAt: Date.now()\n};\n\n// Update sensor data\nlet sensors = context.get('sensors');\nlet activationOrder = context.get('activationOrder');\nconst existingSensorIndex = sensors.findIndex(s => s.id === sensorData.id);\nif (existingSensorIndex !== -1) {\n    sensors[existingSensorIndex] = { ...sensors[existingSensorIndex], ...sensorData };\n} else {\n    activationOrder++;\n    sensors.push({ ...sensorData, activationOrder });\n}\ncontext.set('sensors', sensors);\ncontext.set('activationOrder', activationOrder);\n\n// Update recent activations\nlet recentActivations = context.get('recentActivations');\nrecentActivations.push(sensorData);\nrecentActivations = recentActivations.slice(-activeWindow);\ncontext.set('recentActivations', recentActivations);\n\n// Check for intrusion\nlet approachingCount = 0;\nlet totalComparisons = 0;\nlet isIntrusion = false;\n\nfor (let i = 0; i < recentActivations.length - 1; i++) {\n    for (let j = i + 1; j < recentActivations.length; j++) {\n        const earlierDist = distance(recentActivations[i], homeGPS);\n        const laterDist = distance(recentActivations[j], homeGPS);\n\n        if (laterDist < earlierDist) {\n            approachingCount++;\n        }\n        //totalComparisons++;\n    }\n    if (approachingCount>activeWindow) {\n        isIntrusion = true;\n    }\n}\n\nconst approachRatio = totalComparisons > 0 ? approachingCount / totalComparisons : 0;\n//const isIntrusion = approachRatio > approachThreshold;\n\n// Prepare output\nmsg.payload = {\n    sensorId: sensorData.id,\n    sensorName: sensorData.name,\n    activationOrder: sensorData.activationOrder,\n    isIntrusion: isIntrusion,\n    approachRatio: approachRatio,\n    activeSensors: recentActivations.length,\n    totalSensors: sensors.length,\n    homeGps: msg.payload[1].HOMEGPS,\n    gpsCord: msg.payload[0].GPSCORD,\n    distance: distance(sensorData, homeGPS)\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5940,
        "y": 6200,
        "wires": [
            [
                "a393ac94d16fb36a",
                "f3f70e91cfd2bbd8"
            ]
        ]
    },
    {
        "id": "a393ac94d16fb36a",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "c73a4cd414c20993",
        "name": "debug 544",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 6180,
        "y": 6140,
        "wires": []
    },
    {
        "id": "a324165355d08e0e",
        "type": "inject",
        "z": "34b9d5d8c870350c",
        "g": "c73a4cd414c20993",
        "name": "Setting Sample Input",
        "props": [
            {
                "p": "payload.homegps",
                "v": "(41.489500,2.286556)",
                "vt": "str"
            },
            {
                "p": "payload.sensorid",
                "v": "60A423BEB092",
                "vt": "str"
            },
            {
                "p": "payload.sensorname",
                "v": "Garden-1",
                "vt": "str"
            },
            {
                "p": "payload.gpscord",
                "v": "(41.489317,2.287371)",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 5670,
        "y": 6360,
        "wires": [
            [
                "e3d3bc989375e8ba",
                "eb5bd88b4b0660bb",
                "6dac2d7904e7e7f8"
            ]
        ]
    },
    {
        "id": "76394ea8d41d81be",
        "type": "inject",
        "z": "34b9d5d8c870350c",
        "g": "c73a4cd414c20993",
        "name": "Setting Sample Input",
        "props": [
            {
                "p": "payload.homegps",
                "v": "(41.489500,2.286556)",
                "vt": "str"
            },
            {
                "p": "payload.sensorid",
                "v": "60A423BEB991",
                "vt": "str"
            },
            {
                "p": "payload.sensorname",
                "v": "Garden-2",
                "vt": "str"
            },
            {
                "p": "payload.gpscord",
                "v": "(41.489171,2.286784)",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 5670,
        "y": 6440,
        "wires": [
            [
                "e3d3bc989375e8ba",
                "eb5bd88b4b0660bb",
                "6dac2d7904e7e7f8"
            ]
        ]
    },
    {
        "id": "a7519cdb2d8051cc",
        "type": "inject",
        "z": "34b9d5d8c870350c",
        "g": "c73a4cd414c20993",
        "name": "Setting Sample Input",
        "props": [
            {
                "p": "payload.homegps",
                "v": "(41.489500,2.286556)",
                "vt": "str"
            },
            {
                "p": "payload.sensorid",
                "v": "60A423BEB091",
                "vt": "str"
            },
            {
                "p": "payload.sensorname",
                "v": "Garden-3",
                "vt": "str"
            },
            {
                "p": "payload.gpscord",
                "v": "(41.489361,2.286889)",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 5670,
        "y": 6500,
        "wires": [
            [
                "e3d3bc989375e8ba",
                "eb5bd88b4b0660bb",
                "6dac2d7904e7e7f8"
            ]
        ]
    },
    {
        "id": "eb5bd88b4b0660bb",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "c73a4cd414c20993",
        "name": "debug 545",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 6000,
        "y": 6440,
        "wires": []
    },
    {
        "id": "f3f70e91cfd2bbd8",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "d": true,
        "g": "c73a4cd414c20993",
        "name": "coordinates2Orientation",
        "func": "function calculateOrientation(lat1, lon1, lat2, lon2) {\n    const R = 6371000; // Earth's radius in meters\n    // Convert latitude and longitude to radians\n    const toRadians = (degrees) => degrees * Math.PI / 180;\n    const toDegrees = (radians) => radians * 180 / Math.PI;\n    lat1 = toRadians(lat1);\n    lon1 = toRadians(lon1);\n    lat2 = toRadians(lat2);\n    lon2 = toRadians(lon2);\n    // Calculate differences\n    const dlon = lon2 - lon1;\n    // Bearing (Yaw) calculation\n    const y = Math.sin(dlon) * Math.cos(lat2);\n    const x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(dlon);\n    let bearing = Math.atan2(y, x);\n    bearing = (toDegrees(bearing) + 360) % 360; // Convert to degrees and normalize\n    // Distance calculation\n    const a = Math.sin((lat2 - lat1) / 2) ** 2 + Math.cos(lat1) * Math.cos(lat2) * Math.sin(dlon / 2) ** 2;\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = R * c;\n    // Pitch calculation\n    // Assuming searchlight is 2 meters above ground\n    const searchlightHeight = 2;\n    const pitch = -toDegrees(Math.atan2(searchlightHeight, distance));\n    return { yaw: bearing, pitch: pitch };\n}\n\n// Parse input JSON\nconst homeGPS = msg.payload.homeGps.replace(/[()]/g, '').split(',').map(Number);\nconst targetGPS = msg.payload.gpsCord.replace(/[()]/g, '').split(',').map(Number);\n\n// Calculate orientation\nconst { yaw, pitch } = calculateOrientation(homeGPS[0], homeGPS[1], targetGPS[0], targetGPS[1]);\n\n// Prepare output\nmsg.payload = {\n    SENSORID: msg.payload.sensorId,\n    SENSORNAME: msg.payload.sensorName,\n    YAW: yaw.toFixed(2),\n    PITCH: pitch.toFixed(2),\n    STATE: msg.payload.isIntrusion\n};\n\nif (msg.payload.STATE === true) {\n    return msg;\n}\n//return msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 6190,
        "y": 6200,
        "wires": [
            [
                "3e36a891ccd82b41",
                "5b2198babd6dcef8"
            ]
        ]
    },
    {
        "id": "3e36a891ccd82b41",
        "type": "mqtt out",
        "z": "34b9d5d8c870350c",
        "g": "c73a4cd414c20993",
        "name": "",
        "topic": "CYD",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5304262e2bba2ec6",
        "x": 6490,
        "y": 6360,
        "wires": []
    },
    {
        "id": "5b2198babd6dcef8",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "c73a4cd414c20993",
        "name": "debug 546",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 6450,
        "y": 6180,
        "wires": []
    },
    {
        "id": "d9b5052f8c309e02",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "c73a4cd414c20993",
        "name": "debug 547",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 6290,
        "y": 6360,
        "wires": []
    },
    {
        "id": "1cc4e10f4dbd531b",
        "type": "inject",
        "z": "34b9d5d8c870350c",
        "g": "c73a4cd414c20993",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "approachingCount",
        "payloadType": "flow",
        "x": 6040,
        "y": 6360,
        "wires": [
            [
                "d9b5052f8c309e02"
            ]
        ]
    },
    {
        "id": "6dac2d7904e7e7f8",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "c73a4cd414c20993",
        "name": "coordinates2Orientation",
        "func": "function calculateOrientation(lat1, lon1, lat2, lon2) {\n    const R = 6371000; // Earth's radius in meters\n    // Convert latitude and longitude to radians\n    const toRadians = (degrees) => degrees * Math.PI / 180;\n    const toDegrees = (radians) => radians * 180 / Math.PI;\n    lat1 = toRadians(lat1);\n    lon1 = toRadians(lon1);\n    lat2 = toRadians(lat2);\n    lon2 = toRadians(lon2);\n    // Calculate differences\n    const dlon = lon2 - lon1;\n    // Bearing (Yaw) calculation\n    const y = Math.sin(dlon) * Math.cos(lat2);\n    const x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(dlon);\n    let bearing = Math.atan2(y, x);\n    // Assuming calibration angle is 90° of North (0°)\n    const calibrationYawAngle = 89; \n    bearing = (toDegrees(bearing)- calibrationYawAngle);// + 360) % 360; // Convert to degrees and normalize\n    bearing = 90-bearing; //90° est la position centrale\n    // Distance calculation\n    const a = Math.sin((lat2 - lat1) / 2) ** 2 + Math.cos(lat1) * Math.cos(lat2) * Math.sin(dlon / 2) ** 2;\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = R * c;\n    // Pitch calculation\n    // Assuming searchlight is 2 meters above ground\n    const searchlightHeight = 2;\n    let pitch = -toDegrees(Math.atan2(searchlightHeight, distance));\n    // Assuming calibration angle is 70°\n    const calibrationPitchAngle = 70;\n    pitch = pitch + calibrationPitchAngle;\n    return { yaw: bearing, pitch: pitch };\n}\n\n// Parse input JSON\nconst homeGPS = msg.payload.homegps.replace(/[()]/g, '').split(',').map(Number);\nconst targetGPS = msg.payload.sensorgps.replace(/[()]/g, '').split(',').map(Number);\n\n// Calculate orientation\nconst { yaw, pitch } = calculateOrientation(homeGPS[0], homeGPS[1], targetGPS[0], targetGPS[1]);\n\n// Prepare output\nmsg.payload = {\n    SENSORID: msg.payload.sensorid,\n    SENSORNAME: msg.payload.sensorname,\n    YAW: yaw.toFixed(2),\n    PITCH: pitch.toFixed(2),\n    STATE: msg.payload.isIntrusion\n};\n\n//if (msg.payload.STATE === true) {\n//    return msg;\n//}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 6090,
        "y": 6260,
        "wires": [
            [
                "3e36a891ccd82b41",
                "5b2198babd6dcef8",
                "2f7ce649354c48ad"
            ]
        ]
    },
    {
        "id": "d18fbd915d34a9ef",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "c73a4cd414c20993",
        "name": "coordinates2Orientation",
        "func": "function calculateOrientation(lat1, lon1, lat2, lon2) {\n    const R = 6371000; // Earth's radius in meters\n    // Convert latitude and longitude to radians\n    const toRadians = (degrees) => degrees * Math.PI / 180;\n    const toDegrees = (radians) => radians * 180 / Math.PI;\n    lat1 = toRadians(lat1);\n    lon1 = toRadians(lon1);\n    lat2 = toRadians(lat2);\n    lon2 = toRadians(lon2);\n    // Calculate differences\n    const dlon = lon2 - lon1;\n    // Bearing (Yaw) calculation\n    const y = Math.sin(dlon) * Math.cos(lat2);\n    const x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(dlon);\n    let bearing = Math.atan2(y, x);\n    bearing = (toDegrees(bearing) + 360) % 360; // Convert to degrees and normalize\n    // Assuming calibration angle is 67° of North (0°)\n    const calibrationAngle = 140;\n    bearing = bearing-calibrationAngle;\n    // Distance calculation\n    const a = Math.sin((lat2 - lat1) / 2) ** 2 + Math.cos(lat1) * Math.cos(lat2) * Math.sin(dlon / 2) ** 2;\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = R * c;\n    // Pitch calculation\n    // Assuming searchlight is 2 meters above ground\n    const searchlightHeight = 2;\n    const pitch = -toDegrees(Math.atan2(searchlightHeight, distance));\n    return { yaw: bearing, pitch: pitch };\n}\n\n// Parse input JSON\nconst homeGPS = msg.payload.homegps.replace(/[()]/g, '').split(',').map(Number);\nconst targetGPS = msg.payload.gpscord.replace(/[()]/g, '').split(',').map(Number);\n\n// Calculate orientation\nconst { yaw, pitch } = calculateOrientation(homeGPS[0], homeGPS[1], targetGPS[0], targetGPS[1]);\n\n// Prepare output\nmsg.payload = {\n    SENSORID: msg.payload.sensorid,\n    SENSORNAME: msg.payload.sensorname,\n    YAW: yaw.toFixed(2),\n    PITCH: pitch.toFixed(2),\n    STATE: msg.payload.isIntrusion\n};\n\n//if (msg.payload.STATE === true) {\n//    return msg;\n//}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5910,
        "y": 6600,
        "wires": [
            [
                "bb614dfeb2f1d0d9",
                "84ad1d57c225b792"
            ]
        ]
    },
    {
        "id": "b96b56e07e6095d7",
        "type": "inject",
        "z": "34b9d5d8c870350c",
        "g": "c73a4cd414c20993",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"SENSORID\":\"SENSOR001\",\"SENSORNAME\":\"Garden1\",\"HOMEGPS\":\"(41.489500,2.286556)\",\"GPSCOORD\":\"(41.489317,2.287371)\"}",
        "payloadType": "json",
        "x": 5690,
        "y": 6640,
        "wires": [
            [
                "5b2b64a62721f061",
                "8bdf8866ff84c8cd",
                "d18fbd915d34a9ef"
            ]
        ]
    },
    {
        "id": "5b2b64a62721f061",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "d": true,
        "g": "c73a4cd414c20993",
        "name": "function 245",
        "func": "function calculateOrientation(lat1, lon1, lat2, lon2) {\n    const R = 6371000; // Earth's radius in meters\n    // Convert latitude and longitude to radians\n    const toRadians = (degrees) => degrees * Math.PI / 180;\n    const toDegrees = (radians) => radians * 180 / Math.PI;\n    lat1 = toRadians(lat1);\n    lon1 = toRadians(lon1);\n    lat2 = toRadians(lat2);\n    lon2 = toRadians(lon2);\n    // Calculate differences\n    const dlon = lon2 - lon1;\n    // Bearing (Yaw) calculation\n    const y = Math.sin(dlon) * Math.cos(lat2);\n    const x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(dlon);\n    let bearing = Math.atan2(y, x);\n    bearing = (toDegrees(bearing) + 360) % 360; // Convert to degrees and normalize\n    // Distance calculation\n    const a = Math.sin((lat2 - lat1) / 2) ** 2 + Math.cos(lat1) * Math.cos(lat2) * Math.sin(dlon / 2) ** 2;\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = R * c;\n    // Pitch calculation\n    // Assuming searchlight is 2 meters above ground\n    const searchlightHeight = 2;\n    const pitch = -toDegrees(Math.atan2(searchlightHeight, distance));\n    return { yaw: bearing, pitch: pitch };\n}\n\n// Parse input JSON\nconst homeGPS = msg.payload.HOMEGPS.replace(/[()]/g, '').split(',').map(Number);\nconst targetGPS = msg.payload.GPSCOORD.replace(/[()]/g, '').split(',').map(Number);\n\n// Calculate orientation\nconst { yaw, pitch } = calculateOrientation(homeGPS[0], homeGPS[1], targetGPS[0], targetGPS[1]);\n\n// Prepare output\nmsg.payload = {\n    SENSORID: msg.payload.SENSORID,\n    SENSORNAME: msg.payload.SENSORNAME,\n    YAW: yaw.toFixed(2),\n    PITCH: pitch.toFixed(2)\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5900,
        "y": 6640,
        "wires": [
            [
                "bb614dfeb2f1d0d9",
                "84ad1d57c225b792"
            ]
        ]
    },
    {
        "id": "bb614dfeb2f1d0d9",
        "type": "mqtt out",
        "z": "34b9d5d8c870350c",
        "g": "c73a4cd414c20993",
        "name": "",
        "topic": "CYD",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5304262e2bba2ec6",
        "x": 6110,
        "y": 6640,
        "wires": []
    },
    {
        "id": "84ad1d57c225b792",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "c73a4cd414c20993",
        "name": "debug 548",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 6190,
        "y": 6700,
        "wires": []
    },
    {
        "id": "8bdf8866ff84c8cd",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "c73a4cd414c20993",
        "name": "debug 549",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 5910,
        "y": 6720,
        "wires": []
    },
    {
        "id": "c88da378a3165dcd",
        "type": "inject",
        "z": "34b9d5d8c870350c",
        "g": "c73a4cd414c20993",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"SENSORID\":\"SENSOR002\",\"SENSORNAME\":\"Garden2\",\"HOMEGPS\":\"(41.489500,2.286556)\",\"GPSCOORD\":\"(41.489171,2.286784)\"}",
        "payloadType": "json",
        "x": 5690,
        "y": 6680,
        "wires": [
            [
                "5b2b64a62721f061",
                "8bdf8866ff84c8cd",
                "d18fbd915d34a9ef"
            ]
        ]
    },
    {
        "id": "b83eb5d4c425e6bd",
        "type": "inject",
        "z": "34b9d5d8c870350c",
        "g": "c73a4cd414c20993",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"SENSORID\":\"SENSOR003\",\"SENSORNAME\":\"Garden3\",\"HOMEGPS\":\"(41.489500,2.286556)\",\"GPSCOORD\":\"(41.489361,2.286889)\"}",
        "payloadType": "json",
        "x": 5690,
        "y": 6720,
        "wires": [
            [
                "5b2b64a62721f061",
                "8bdf8866ff84c8cd",
                "d18fbd915d34a9ef"
            ]
        ]
    },
    {
        "id": "2f7ce649354c48ad",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "c73a4cd414c20993",
        "name": "Adding event name to payload",
        "func": "\nmsg.payload = { \n    eventName: 'PathFound'};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 6750,
        "y": 6280,
        "wires": [
            []
        ]
    },
    {
        "id": "e7fc0391af3940fc",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "c73a4cd414c20993",
        "name": "debug 550",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 6950,
        "y": 6140,
        "wires": []
    },
    {
        "id": "132be72fd9d74bdb",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "0cfa3208ebf2c27a",
        "name": "Distance calculation",
        "func": "function calculateDistance(lat1, lon1, lat2, lon2) {\n    const R = 6371000; // Earth's radius in meters\n    // Convert latitude and longitude to radians\n    const toRadians = (degrees) => degrees * Math.PI / 180;\n    lat1 = toRadians(lat1);\n    lon1 = toRadians(lon1);\n    lat2 = toRadians(lat2);\n    lon2 = toRadians(lon2);\n    // Calculate differences\n    const dlon = lon2 - lon1;\n    // Distance calculation\n    const a = Math.sin((lat2 - lat1) / 2) ** 2 + Math.cos(lat1) * Math.cos(lat2) * Math.sin(dlon / 2) ** 2;\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = R * c;\n    return distance;\n}\n\n// Example usage\nconst homeGPS = msg.payload.homegps.replace(/[()]/g, '').split(',').map(Number);\nconst targetGPS = msg.payload.sensorgps.replace(/[()]/g, '').split(',').map(Number);\n\n// Calculate distance\nconst distance = calculateDistance(homeGPS[0], homeGPS[1], targetGPS[0], targetGPS[1]);\n\n// Prepare output\nmsg.payload = { \n    sensorId: msg.payload.sensorid,\n    distance: distance.toFixed(2) \n    };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5720,
        "y": 5940,
        "wires": [
            [
                "02989a56ff064cc7"
            ]
        ]
    },
    {
        "id": "0ea817dbaae0a47d",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "0cfa3208ebf2c27a",
        "name": "debug 551",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 6230,
        "y": 5820,
        "wires": []
    },
    {
        "id": "02989a56ff064cc7",
        "type": "join",
        "z": "34b9d5d8c870350c",
        "g": "0cfa3208ebf2c27a",
        "name": "",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 6210,
        "y": 5880,
        "wires": [
            [
                "de91bd9e201564a9",
                "bcb28c02c8b90649"
            ]
        ]
    },
    {
        "id": "de91bd9e201564a9",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "0cfa3208ebf2c27a",
        "name": "debug 552",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 6330,
        "y": 5940,
        "wires": []
    },
    {
        "id": "bcb28c02c8b90649",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "0cfa3208ebf2c27a",
        "name": "Test maxDistance reached",
        "property": "payload.distance",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lte",
                "v": "payload.triggervalue",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 6440,
        "y": 5880,
        "wires": [
            [
                "059256d4ec5ebcfc"
            ]
        ]
    },
    {
        "id": "059256d4ec5ebcfc",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "0cfa3208ebf2c27a",
        "name": "Adding event name to payload",
        "func": "\nmsg.payload = { \n    eventName: 'MaxDistance'};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 6770,
        "y": 5880,
        "wires": [
            []
        ]
    },
    {
        "id": "aff7db0bc02d6368",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "0cfa3208ebf2c27a",
        "name": "function 246",
        "func": "msg.payload = {\n    triggervalue: msg.payload.result[0].triggervalue,\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 6050,
        "y": 5840,
        "wires": [
            [
                "02989a56ff064cc7"
            ]
        ]
    },
    {
        "id": "e6d3d4cf49eeb558",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "2a584053457b55a7",
        "name": "Adding event name to payload",
        "func": "\nmsg.payload = { \n    eventName: 'Motion'\n    };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 6230,
        "y": 5640,
        "wires": [
            []
        ]
    },
    {
        "id": "f961771c76b22c65",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "b9f8919490b4e0f8",
        "name": "",
        "property": "topic.projectids",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "topic.currentProjectId",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 4770,
        "y": 6180,
        "wires": [
            [
                "6dac2d7904e7e7f8",
                "132be72fd9d74bdb",
                "e6d3d4cf49eeb558",
                "f305eefd989da483",
                "dc4901454ef9dc5c"
            ]
        ]
    },
    {
        "id": "ade3228573ea0e23",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "b9f8919490b4e0f8",
        "name": "Project's Topic",
        "func": "msg.topic.currentProjectId = msg.payload.result[0].projectid;\nmsg.payload = {\n    projectid: msg.payload.result[0].projectid,\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4660,
        "y": 6000,
        "wires": [
            [
                "4487be170e6c4e02",
                "5af18001646345c3"
            ]
        ]
    },
    {
        "id": "146a95e7438c2841",
        "type": "inject",
        "z": "34b9d5d8c870350c",
        "g": "b9f8919490b4e0f8",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 4500,
        "y": 5860,
        "wires": [
            []
        ]
    },
    {
        "id": "f305eefd989da483",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "b9f8919490b4e0f8",
        "name": "debug 554",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4850,
        "y": 6280,
        "wires": []
    },
    {
        "id": "4487be170e6c4e02",
        "type": "join",
        "z": "34b9d5d8c870350c",
        "g": "b9f8919490b4e0f8",
        "name": "",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 4610,
        "y": 6180,
        "wires": [
            [
                "f961771c76b22c65",
                "51e35df104252090"
            ]
        ]
    },
    {
        "id": "51e35df104252090",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "b9f8919490b4e0f8",
        "name": "debug 555",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4630,
        "y": 6260,
        "wires": []
    },
    {
        "id": "5af18001646345c3",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "b9f8919490b4e0f8",
        "name": "debug 556",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4890,
        "y": 6000,
        "wires": []
    },
    {
        "id": "910821b78d260483",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "b9f8919490b4e0f8",
        "name": "debug 557",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4590,
        "y": 6040,
        "wires": []
    },
    {
        "id": "e649fc743bf4e29e",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "b9f8919490b4e0f8",
        "name": "ProjectCodeInput",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4150,
        "y": 6200,
        "wires": [
            [
                "4487be170e6c4e02",
                "34571baa23fe35b5"
            ]
        ]
    },
    {
        "id": "a563133ccbf2d8b4",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "64fdefb75f957abe",
        "name": "debug 559",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 6280,
        "wires": []
    },
    {
        "id": "2be112a7d9138740",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "d0af9de15541f891",
        "name": "Send request find user's Sensors",
        "func": "\nvar userId = flow.get('user_id'); // Get the flow variable\nvar sqlQuery = `SELECT * FROM SENSORS WHERE USERID = ${userId};`; // Construct the SQL query\n\n\nmsg.payload = {\n    userid: userId,\n    topic: \"SelectSensorsOfUserMQTT\",\n    query: sqlQuery\n};\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 5440,
        "wires": [
            [
                "c17b6dad1450065b"
            ]
        ]
    },
    {
        "id": "c17b6dad1450065b",
        "type": "mqtt out",
        "z": "34b9d5d8c870350c",
        "g": "d0af9de15541f891",
        "name": "",
        "topic": "server",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5304262e2bba2ec6",
        "x": 1970,
        "y": 5440,
        "wires": []
    },
    {
        "id": "78e9e0ad998deca6",
        "type": "mqtt in",
        "z": "34b9d5d8c870350c",
        "g": "d0af9de15541f891",
        "name": "",
        "topic": "response",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5304262e2bba2ec6",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 2120,
        "y": 5440,
        "wires": [
            [
                "c4e9a8f6f4d74e48"
            ]
        ]
    },
    {
        "id": "c4e9a8f6f4d74e48",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "d0af9de15541f891",
        "name": "",
        "property": "payload.userid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "user_id",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2270,
        "y": 5440,
        "wires": [
            [
                "aceafb8778f012ca"
            ]
        ]
    },
    {
        "id": "aceafb8778f012ca",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "d0af9de15541f891",
        "name": "",
        "property": "payload.topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SelectSensorsOfUserMQTT",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2410,
        "y": 5440,
        "wires": [
            [
                "325433da380be64f",
                "87849ad4f971051e"
            ]
        ]
    },
    {
        "id": "325433da380be64f",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "d0af9de15541f891",
        "name": "debug 558",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2590,
        "y": 5440,
        "wires": []
    },
    {
        "id": "87849ad4f971051e",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "d0af9de15541f891",
        "name": "function 247",
        "func": "var sensorList = msg.payload.result;\nflow.set(\"sensorList\", sensorList);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2550,
        "y": 5380,
        "wires": [
            []
        ]
    },
    {
        "id": "d616d07adc54c790",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "73e3f8beed25e94e",
        "name": "Send request find user's Sensors",
        "func": "\nvar userId = flow.get('user_id'); // Get the flow variable\nvar sensorId = msg.payload;\n\nvar sqlQuery = `SELECT SENSORID, SENSORNAME, SENSORGPS FROM SENSORS WHERE SENSORID = '${sensorId}';`; // Construct the SQL query\n\n\nmsg.payload = {\n    userid: userId,\n    topic: \"SelectInfoOfSensorsForMQTT\",\n    query: sqlQuery\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 6180,
        "wires": [
            [
                "eeb8a2b186871d5d"
            ]
        ]
    },
    {
        "id": "eeb8a2b186871d5d",
        "type": "mqtt out",
        "z": "34b9d5d8c870350c",
        "g": "73e3f8beed25e94e",
        "name": "",
        "topic": "server",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5304262e2bba2ec6",
        "x": 1250,
        "y": 6180,
        "wires": []
    },
    {
        "id": "222e8fecd5c94159",
        "type": "mqtt in",
        "z": "34b9d5d8c870350c",
        "g": "73e3f8beed25e94e",
        "name": "",
        "topic": "response",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5304262e2bba2ec6",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1400,
        "y": 6180,
        "wires": [
            [
                "868ebfc6130e0737"
            ]
        ]
    },
    {
        "id": "868ebfc6130e0737",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "73e3f8beed25e94e",
        "name": "",
        "property": "payload.userid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "user_id",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1550,
        "y": 6180,
        "wires": [
            [
                "fd562dacaff9c4f9"
            ]
        ]
    },
    {
        "id": "fd562dacaff9c4f9",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "73e3f8beed25e94e",
        "name": "",
        "property": "payload.topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SelectInfoOfSensorsForMQTT",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1690,
        "y": 6180,
        "wires": [
            [
                "5bb7a1233a28320b",
                "41a0971a56e54bf5",
                "680d1b3595b12353"
            ]
        ]
    },
    {
        "id": "5bb7a1233a28320b",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "73e3f8beed25e94e",
        "name": "debug 560",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 6120,
        "wires": []
    },
    {
        "id": "4b0c42c3dbd90084",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "73e3f8beed25e94e",
        "name": "Send request find user's Sensors",
        "func": "\nvar userId = flow.get('user_id'); // Get the flow variable\n\nvar sqlQuery = `SELECT HOMEGPS FROM USERS WHERE USERID = '${userId}';`; // Construct the SQL query\n\n\nmsg.payload = {\n    userid: userId,\n    topic: \"SelectHomeGpsForMQTT\",\n    query: sqlQuery\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 6220,
        "wires": [
            [
                "37eec3b8705e438a"
            ]
        ]
    },
    {
        "id": "37eec3b8705e438a",
        "type": "mqtt out",
        "z": "34b9d5d8c870350c",
        "g": "73e3f8beed25e94e",
        "name": "",
        "topic": "server",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5304262e2bba2ec6",
        "x": 1250,
        "y": 6220,
        "wires": []
    },
    {
        "id": "310d312159dca52c",
        "type": "mqtt in",
        "z": "34b9d5d8c870350c",
        "g": "73e3f8beed25e94e",
        "name": "",
        "topic": "response",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5304262e2bba2ec6",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1400,
        "y": 6220,
        "wires": [
            [
                "569979f14d75dbcb"
            ]
        ]
    },
    {
        "id": "569979f14d75dbcb",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "73e3f8beed25e94e",
        "name": "",
        "property": "payload.userid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "user_id",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1550,
        "y": 6220,
        "wires": [
            [
                "5d25c9d08728df4b"
            ]
        ]
    },
    {
        "id": "5d25c9d08728df4b",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "73e3f8beed25e94e",
        "name": "",
        "property": "payload.topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SelectHomeGpsForMQTT",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1690,
        "y": 6220,
        "wires": [
            [
                "838d3310b3a72fd1",
                "0b84e7a1a17b171c"
            ]
        ]
    },
    {
        "id": "838d3310b3a72fd1",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "73e3f8beed25e94e",
        "name": "debug 561",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1850,
        "y": 6260,
        "wires": []
    },
    {
        "id": "41a0971a56e54bf5",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "73e3f8beed25e94e",
        "name": "Format Conversion",
        "func": "var newMsg = {\n    \"payload\": msg.payload.result[0]\n}\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 6180,
        "wires": [
            [
                "7d10627380a7bfbe"
            ]
        ]
    },
    {
        "id": "0b84e7a1a17b171c",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "73e3f8beed25e94e",
        "name": "Format Conversion",
        "func": "var newMsg = {\n    \"payload\": msg.payload.result[0]\n}\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 6220,
        "wires": [
            [
                "7d10627380a7bfbe"
            ]
        ]
    },
    {
        "id": "680d1b3595b12353",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "264d8e6587330dd6",
        "name": "Send request find user's Sensors",
        "func": "\nvar userId = flow.get('user_id'); // Get the flow variable\nvar sensorId = msg.payload.result[0].sensorid;\n\nvar sqlQuery = `\nSELECT PROJECTID FROM PROJECTSENSORS\nWHERE SENSORID = '${sensorId}' \n`;\n\nmsg.payload = {\n    userid: userId,\n    topic: \"SelectProjectOfSensorForMQTT\",\n    query: sqlQuery\n};\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 5920,
        "wires": [
            [
                "f3b3ae1963c885d0"
            ]
        ]
    },
    {
        "id": "f3b3ae1963c885d0",
        "type": "mqtt out",
        "z": "34b9d5d8c870350c",
        "g": "264d8e6587330dd6",
        "name": "",
        "topic": "server",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5304262e2bba2ec6",
        "x": 1430,
        "y": 5920,
        "wires": []
    },
    {
        "id": "6970ff51a305b3ae",
        "type": "mqtt in",
        "z": "34b9d5d8c870350c",
        "g": "264d8e6587330dd6",
        "name": "",
        "topic": "response",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5304262e2bba2ec6",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1580,
        "y": 5920,
        "wires": [
            [
                "e11f86c1200069ef"
            ]
        ]
    },
    {
        "id": "e11f86c1200069ef",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "264d8e6587330dd6",
        "name": "",
        "property": "payload.userid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "user_id",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1730,
        "y": 5920,
        "wires": [
            [
                "1c9b889f24de9412"
            ]
        ]
    },
    {
        "id": "1c9b889f24de9412",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "264d8e6587330dd6",
        "name": "",
        "property": "payload.topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SelectProjectOfSensorForMQTT",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1870,
        "y": 5920,
        "wires": [
            [
                "0bc107d3267fbcb6",
                "eef50ee37a035b3b"
            ]
        ]
    },
    {
        "id": "8a9f2aa60bb64229",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "64fdefb75f957abe",
        "name": "debug 562",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2570,
        "y": 6260,
        "wires": []
    },
    {
        "id": "eef50ee37a035b3b",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "264d8e6587330dd6",
        "name": "function 248",
        "func": "// Extract the list of projects from msg.payload\nvar projects = msg.payload.result;\n\n// Initialize an array to hold the project IDs\nvar projectIds = projects.map(project => project.projectid);\n\n// Format the project IDs as an object with the key 'sensorids'\nmsg.payload = { projectids: projectIds };\n\n// Return the modified message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2090,
        "y": 5920,
        "wires": [
            [
                "66ba91e1d82f9664",
                "9d689208007af48e"
            ]
        ]
    },
    {
        "id": "9d689208007af48e",
        "type": "debug",
        "z": "34b9d5d8c870350c",
        "g": "264d8e6587330dd6",
        "name": "debug 563",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2310,
        "y": 5920,
        "wires": []
    },
    {
        "id": "a61e4603b29a8b29",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "b9f8919490b4e0f8",
        "name": "",
        "property": "payload.topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SelectProjectIDForSearchlight",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 4450,
        "y": 6000,
        "wires": [
            [
                "ade3228573ea0e23",
                "910821b78d260483"
            ]
        ]
    },
    {
        "id": "34571baa23fe35b5",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "b9f8919490b4e0f8",
        "name": "SelectProjectIDForSearchlight",
        "func": "\nvar currentProjectName = \"SearchLight\";\nvar userId = flow.get('user_id'); // Get the flow variable\n\n\n\nvar sqlQuery = `SELECT PROJECTID FROM PROJECTS WHERE PROJECTNAME = '${currentProjectName}';`; // Construct the SQL query\n\n\nmsg.payload = {\n    userid: userId,\n    topic: \"SelectProjectIDForSearchlight\",\n    query: sqlQuery\n};\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3750,
        "y": 6000,
        "wires": [
            [
                "1fd92c519d056642"
            ]
        ]
    },
    {
        "id": "1fd92c519d056642",
        "type": "mqtt out",
        "z": "34b9d5d8c870350c",
        "g": "b9f8919490b4e0f8",
        "name": "",
        "topic": "server",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5304262e2bba2ec6",
        "x": 4010,
        "y": 6000,
        "wires": []
    },
    {
        "id": "e3873320302c5ac6",
        "type": "mqtt in",
        "z": "34b9d5d8c870350c",
        "g": "b9f8919490b4e0f8",
        "name": "",
        "topic": "response",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5304262e2bba2ec6",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 4160,
        "y": 6000,
        "wires": [
            [
                "578db0e9a9b0c810"
            ]
        ]
    },
    {
        "id": "578db0e9a9b0c810",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "b9f8919490b4e0f8",
        "name": "",
        "property": "payload.userid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "user_id",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 4310,
        "y": 6000,
        "wires": [
            [
                "a61e4603b29a8b29"
            ]
        ]
    },
    {
        "id": "a1fabecf82faf188",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "0cfa3208ebf2c27a",
        "name": "",
        "property": "payload.topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SelectTriggerValueForEventDetection",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 5930,
        "y": 5800,
        "wires": [
            [
                "aff7db0bc02d6368",
                "0ea817dbaae0a47d"
            ]
        ]
    },
    {
        "id": "dc4901454ef9dc5c",
        "type": "function",
        "z": "34b9d5d8c870350c",
        "g": "0cfa3208ebf2c27a",
        "name": "Send request find Trigger Value",
        "func": "\nvar userId = flow.get('user_id'); // Get the flow variable\nvar triggerConstant = \"maxDistance\";\n\nvar sqlQuery = `SELECT TRIGGERVALUE FROM TRIGGERCONSTANTS WHERE TRIGGERNAME = '${triggerConstant}';`;\n\n\nmsg.payload = {\n    userid: userId,\n    topic: \"SelectTriggerValueForEventDetection\",\n    query: sqlQuery\n};\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 5270,
        "y": 5800,
        "wires": [
            [
                "aba71187493b930d"
            ]
        ]
    },
    {
        "id": "aba71187493b930d",
        "type": "mqtt out",
        "z": "34b9d5d8c870350c",
        "g": "0cfa3208ebf2c27a",
        "name": "",
        "topic": "server",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5304262e2bba2ec6",
        "x": 5490,
        "y": 5800,
        "wires": []
    },
    {
        "id": "500a51a8d827cf08",
        "type": "mqtt in",
        "z": "34b9d5d8c870350c",
        "g": "0cfa3208ebf2c27a",
        "name": "",
        "topic": "response",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5304262e2bba2ec6",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 5640,
        "y": 5800,
        "wires": [
            [
                "293b2bb02be56b69"
            ]
        ]
    },
    {
        "id": "293b2bb02be56b69",
        "type": "switch",
        "z": "34b9d5d8c870350c",
        "g": "0cfa3208ebf2c27a",
        "name": "",
        "property": "payload.userid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "user_id",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 5790,
        "y": 5800,
        "wires": [
            [
                "a1fabecf82faf188"
            ]
        ]
    },
    {
        "id": "189b07066857a9dc",
        "type": "ui_group",
        "name": "Projects",
        "tab": "fc3a8ff3f04bf86f",
        "order": 11,
        "disp": true,
        "width": "5",
        "collapse": false,
        "className": ""
    },
    {
        "id": "bb08f9111b2f85de",
        "type": "ui_group",
        "name": "Projects_Sensors",
        "tab": "fc3a8ff3f04bf86f",
        "order": 12,
        "disp": true,
        "width": "5",
        "collapse": false,
        "className": ""
    },
    {
        "id": "255dc90b96cf3a52",
        "type": "ui_group",
        "name": "Add_Project",
        "tab": "fc3a8ff3f04bf86f",
        "order": 13,
        "disp": true,
        "width": "5",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8f0a6d83b373cd31",
        "type": "ui_group",
        "name": "Buttons",
        "tab": "fc3a8ff3f04bf86f",
        "order": 14,
        "disp": false,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "97ca55bdc6353279",
        "type": "ui_group",
        "name": "ConnectionPage",
        "tab": "fc3a8ff3f04bf86f",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "5304262e2bba2ec6",
        "type": "mqtt-broker",
        "name": "mosquitto",
        "broker": "cp-localmqtt.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "5f317e2d5b63bb05",
        "type": "ui_group",
        "name": "Statistics",
        "tab": "fc3a8ff3f04bf86f",
        "order": 8,
        "disp": true,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "01850909bba97cea",
        "type": "ui_group",
        "name": "Logs",
        "tab": "fc3a8ff3f04bf86f",
        "order": 9,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2f83b7b4583ea4d6",
        "type": "postgreSQLConfig",
        "name": "db",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "true",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "",
        "userFieldType": "str",
        "password": "",
        "passwordFieldType": "str"
    },
    {
        "id": "d1274cb918772441",
        "type": "ui_group",
        "name": "System",
        "tab": "fc3a8ff3f04bf86f",
        "order": 7,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d5c1e5202f4e4b5c",
        "type": "ui_group",
        "name": "Add_devices",
        "tab": "fc3a8ff3f04bf86f",
        "order": 1,
        "disp": true,
        "width": "9",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c94f5149bba263cf",
        "type": "ui_group",
        "name": "DevicesConnected",
        "tab": "fc3a8ff3f04bf86f",
        "order": 5,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "861f644b7c69cbbe",
        "type": "ui_group",
        "name": "Map",
        "tab": "fc3a8ff3f04bf86f",
        "order": 10,
        "disp": true,
        "width": "27",
        "collapse": false,
        "className": ""
    },
    {
        "id": "21dd1e78a0d8a51b",
        "type": "ui_group",
        "name": "ChooseMapPoint",
        "tab": "fc3a8ff3f04bf86f",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "88f77589.0122d8",
        "type": "ui_group",
        "name": "LogInPage",
        "tab": "fc3a8ff3f04bf86f",
        "order": 2,
        "disp": true,
        "width": "15",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2de9a0a4d2bbf71c",
        "type": "ui_group",
        "name": "RegisterPage",
        "tab": "fc3a8ff3f04bf86f",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "fc3a8ff3f04bf86f",
        "type": "ui_tab",
        "name": "Main",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]